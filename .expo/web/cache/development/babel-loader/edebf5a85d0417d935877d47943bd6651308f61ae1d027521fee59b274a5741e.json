{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-native';\nimport callMsGraph from \"../../../../Functions/microsoftAssets\";\nimport { accessTokenContent } from \"../../../../../App\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowDimensions = Dimensions.get('window');\nvar screenDimensions = Dimensions.get('screen');\nexport default function MicrosoftGraphEditList() {\n  var _useState = useState({\n      window: windowDimensions,\n      screen: screenDimensions\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    dimensions = _useState2[0],\n    setDimensions = _useState2[1];\n  useEffect(function () {\n    var subscription = Dimensions.addEventListener('change', function (_ref) {\n      var window = _ref.window,\n        screen = _ref.screen;\n      setDimensions({\n        window: window,\n        screen: screen\n      });\n    });\n    return function () {\n      return subscription == null ? void 0 : subscription.remove();\n    };\n  });\n  useEffect(function () {\n    setDimensions({\n      window: Dimensions.get('window'),\n      screen: Dimensions.get('screen')\n    });\n  }, []);\n  var microsoftAccessToken = useContext(accessTokenContent);\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentColumns = _useState4[0],\n    setCurrentColumns = _useState4[1];\n  var _useParams = useParams(),\n    listId = _useParams.listId;\n  function getListItems() {\n    return _getListItems.apply(this, arguments);\n  }\n  function _getListItems() {\n    _getListItems = _asyncToGenerator(function* () {\n      var result = yield callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/8td1tk.sharepoint.com,b2ef509e-4511-48c3-b607-a8c2cddc0e35,091feb8c-a978-4e3f-a60f-ecdc319b2304/lists/\" + listId + \"/items?expand=fields\");\n      if (result.ok) {\n        var data = yield result.json();\n        console.log(data);\n      } else {}\n    });\n    return _getListItems.apply(this, arguments);\n  }\n  function indexColumn(_x) {\n    return _indexColumn.apply(this, arguments);\n  }\n  function _indexColumn() {\n    _indexColumn = _asyncToGenerator(function* (columnId) {\n      var data = {\n        \"indexed\": \"true\"\n      };\n      var result = yield callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/8td1tk.sharepoint.com,b2ef509e-4511-48c3-b607-a8c2cddc0e35,091feb8c-a978-4e3f-a60f-ecdc319b2304/lists/\" + listId + \"/columns/\" + columnId, \"PATCH\", false, JSON.stringify(data));\n      console.log(result);\n      if (result.ok) {\n        var _data = yield result.json();\n        console.log(_data);\n        var newColumnData = currentColumns;\n        var index = newColumnData.findIndex(function (e) {\n          e.id === columnId;\n        });\n        if (index !== -1) {\n          newColumnData[index].indexed = true;\n          setCurrentColumns(newColumnData);\n        } else {}\n      }\n    });\n    return _indexColumn.apply(this, arguments);\n  }\n  function getColumns() {\n    return _getColumns.apply(this, arguments);\n  }\n  function _getColumns() {\n    _getColumns = _asyncToGenerator(function* () {\n      var result = yield callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/8td1tk.sharepoint.com,b2ef509e-4511-48c3-b607-a8c2cddc0e35,091feb8c-a978-4e3f-a60f-ecdc319b2304/lists/\" + listId + \"/columns\");\n      if (result.ok) {\n        var data = yield result.json();\n        console.log(data);\n        if (data[\"value\"].length !== undefined) {\n          var newCurrentColumns = [];\n          for (var index = 0; index < data[\"value\"].length; index++) {\n            newCurrentColumns.push({\n              columnGroup: data[\"value\"][index][\"columnGroup\"],\n              description: data[\"value\"][index][\"description\"],\n              displayName: data[\"value\"][index][\"displayName\"],\n              enforceUniqueValues: data[\"value\"][index][\"enforceUniqueValues\"],\n              hidden: data[\"value\"][index][\"hidden\"],\n              id: data[\"value\"][index][\"id\"],\n              indexed: data[\"value\"][index][\"indexed\"],\n              name: data[\"value\"][index][\"name\"],\n              readOnly: data[\"value\"][index][\"readOnly\"],\n              required: data[\"value\"][index][\"required\"]\n            });\n          }\n          setCurrentColumns(newCurrentColumns);\n        }\n      } else {}\n    });\n    return _getColumns.apply(this, arguments);\n  }\n  useEffect(function () {\n    getListItems();\n    getColumns();\n  }, []);\n  return _jsxs(View, {\n    style: {\n      overflow: \"hidden\"\n    },\n    children: [_jsx(Link, {\n      to: \"/profile/government/graph\",\n      children: _jsx(Text, {\n        children: \"Back\"\n      })\n    }), _jsx(Text, {\n      children: \"MicrosoftGraphEditList\"\n    }), _jsx(Text, {\n      children: listId\n    }), _jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        overflow: \"scroll\",\n        height: dimensions.window.height * 0.4\n      },\n      children: currentColumns.map(function (item) {\n        return _jsxs(View, {\n          style: {\n            width: dimensions.window.width * 0.3,\n            height: dimensions.window.height * 0.4,\n            borderColor: \"black\",\n            borderWidth: 2\n          },\n          children: [_jsx(Text, {\n            children: item.displayName\n          }), item.indexed === false ? _jsx(Button, {\n            title: \"Index This Propertie\",\n            onPress: function onPress() {\n              indexColumn(item.id);\n            }\n          }) : _jsx(Text, {\n            children: \"Already Indexed\"\n          })]\n        });\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useContext","useEffect","useState","Link","useParams","callMsGraph","accessTokenContent","jsx","_jsx","jsxs","_jsxs","windowDimensions","Dimensions","get","screenDimensions","MicrosoftGraphEditList","_useState","window","screen","_useState2","_slicedToArray","dimensions","setDimensions","subscription","addEventListener","_ref","remove","microsoftAccessToken","_useState3","_useState4","currentColumns","setCurrentColumns","_useParams","listId","getListItems","_getListItems","apply","arguments","_asyncToGenerator","result","accessToken","ok","data","json","console","log","indexColumn","_x","_indexColumn","columnId","JSON","stringify","newColumnData","index","findIndex","e","id","indexed","getColumns","_getColumns","length","undefined","newCurrentColumns","push","columnGroup","description","displayName","enforceUniqueValues","hidden","name","readOnly","required","View","style","overflow","children","to","Text","flexDirection","height","map","item","width","borderColor","borderWidth","Button","title","onPress"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/AuthenticatedView/Profile/Government/MicrosoftGraphLists/MicrosoftGraphEditList.tsx"],"sourcesContent":["import { View, Text, Dimensions, Button } from 'react-native'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-native'\nimport callMsGraph from '../../../../Functions/microsoftAssets'\nimport { accessTokenContent } from '../../../../../App';\n\ndeclare global {\n    type listColumnType = {\n        columnGroup: string\n        description: string\n        displayName: string\n        enforceUniqueValues: boolean\n        hidden: boolean\n        id: string\n        indexed: boolean\n        name: string\n        readOnly: boolean\n        required: boolean\n    }\n}\n\nconst windowDimensions = Dimensions.get('window');\nconst screenDimensions = Dimensions.get('screen');\n\nexport default function MicrosoftGraphEditList() {\n    const [dimensions, setDimensions] = useState({\n        window: windowDimensions,\n        screen: screenDimensions,\n      });\n    \n\n    useEffect(() => {\n        const subscription = Dimensions.addEventListener(\n          'change',\n          ({window, screen}) => {\n            setDimensions({window, screen});\n          },\n        );\n        return () => subscription?.remove();\n    });\n\n    useEffect(() => {\n        setDimensions({\n            window: Dimensions.get('window'),\n            screen: Dimensions.get('screen')\n        })\n    }, [])\n    const microsoftAccessToken = useContext(accessTokenContent);\n    const [currentColumns, setCurrentColumns] = useState<listColumnType[]>([])\n    const { listId } = useParams()\n    async function getListItems() {\n        const result = await callMsGraph(microsoftAccessToken.accessToken,\"https://graph.microsoft.com/v1.0/sites/8td1tk.sharepoint.com,b2ef509e-4511-48c3-b607-a8c2cddc0e35,091feb8c-a978-4e3f-a60f-ecdc319b2304/lists/\" + listId + \"/items?expand=fields\")\n        if (result.ok) {\n            const data = await result.json()\n            console.log(data)\n        } else {\n\n        }\n    }\n    async function indexColumn(columnId: string) {\n        const data = {\n            \"indexed\": \"true\" \n        }\n        const result = await callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/8td1tk.sharepoint.com,b2ef509e-4511-48c3-b607-a8c2cddc0e35,091feb8c-a978-4e3f-a60f-ecdc319b2304/lists/\"+ listId + \"/columns/\" + columnId, \"PATCH\", false, JSON.stringify(data))//TO DO fix ids\n        console.log(result)\n        if (result.ok){\n            const data = await result.json()\n            console.log(data)\n            var newColumnData: listColumnType[] = currentColumns\n            const index = newColumnData.findIndex((e) => {e.id === columnId})\n            if (index !== -1){\n                newColumnData[index].indexed = true\n                setCurrentColumns(newColumnData)\n            } else {\n                //TO DO failed\n            }\n        }\n    }\n    async function getColumns() {\n        const result = await callMsGraph(microsoftAccessToken.accessToken,\"https://graph.microsoft.com/v1.0/sites/8td1tk.sharepoint.com,b2ef509e-4511-48c3-b607-a8c2cddc0e35,091feb8c-a978-4e3f-a60f-ecdc319b2304/lists/\" + listId + \"/columns\")\n        if (result.ok) {\n            const data = await result.json()\n            console.log(data)\n            if (data[\"value\"].length !== undefined){\n                var newCurrentColumns: listColumnType[] = []\n                for(let index = 0; index < data[\"value\"].length; index++){\n                    newCurrentColumns.push({\n                        columnGroup: data[\"value\"][index][\"columnGroup\"],\n                        description: data[\"value\"][index][\"description\"],\n                        displayName: data[\"value\"][index][\"displayName\"],\n                        enforceUniqueValues: data[\"value\"][index][\"enforceUniqueValues\"],\n                        hidden: data[\"value\"][index][\"hidden\"],\n                        id: data[\"value\"][index][\"id\"],\n                        indexed: data[\"value\"][index][\"indexed\"],\n                        name: data[\"value\"][index][\"name\"],\n                        readOnly: data[\"value\"][index][\"readOnly\"],\n                        required: data[\"value\"][index][\"required\"]\n                    })\n                }\n                setCurrentColumns(newCurrentColumns)\n            }\n        } else {\n\n        }\n    }\n    useEffect(() => {getListItems(); getColumns()}, [])\n    return (\n        <View style={{overflow: \"hidden\"}}>\n            <Link to=\"/profile/government/graph\">\n                <Text>Back</Text>\n            </Link>\n            <Text>MicrosoftGraphEditList</Text>\n            <Text>{listId}</Text>\n            <View style={{flexDirection: \"row\", overflow: \"scroll\", height: dimensions.window.height * 0.4}}>\n            {currentColumns.map((item) => (\n                <View style={{width: dimensions.window.width * 0.3, height: dimensions.window.height * 0.4, borderColor: \"black\", borderWidth: 2}}>\n                    <Text>{item.displayName}</Text>\n                    {(item.indexed === false) ? <Button title='Index This Propertie' onPress={() => {indexColumn(item.id)}}/>:<Text>Already Indexed</Text>\n                    }\n                </View>\n            ))}\n            </View>\n        </View>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}