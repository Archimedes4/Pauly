{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { createSlice } from '@reduxjs/toolkit';\nvar initalCalendarState = [];\nexport var currentEventsSlice = createSlice({\n  name: \"currentEvents\",\n  initialState: initalCalendarState,\n  reducers: {\n    setCurrentEvents: function setCurrentEvents(state, action) {\n      return _toConsumableArray(action.payload);\n    }\n  }\n});\nexport default currentEventsSlice.reducer;","map":{"version":3,"names":["createSlice","initalCalendarState","currentEventsSlice","name","initialState","reducers","setCurrentEvents","state","action","_toConsumableArray","payload","reducer"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/Redux/reducers/currentEventReducer.ts"],"sourcesContent":["\n\nimport { createSlice } from '@reduxjs/toolkit';\n\n\n// function calendarReducer(state: eventState=initialState, action: setCurrentEventsSchoolYearType | setCurrentEventsType): eventState {\n//     switch (action.type) {\n//         case SET_CURRENT_EVENTS: {\n//             return {...state, currentEvents: action.payload}\n//         }\n//         case SET_CURRENT_EVENTS_SCHOOL_YEAR: {\n//             return {...state, currentEventsSchoolYear: action.payload}\n//         }\n//         default:\n//             return state\n//     }\n// }\n\nconst initalCalendarState: string[] = []\n\nexport const currentEventsSlice = createSlice({\n    name: \"currentEvents\",\n    initialState: initalCalendarState,\n    reducers: {\n        setCurrentEvents: (state, action) => {\n            return [...action.payload]\n        }\n    }\n})\n\n\nexport default currentEventsSlice.reducer\n\n\n// import { createSlice } from '@reduxjs/toolkit'\n\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState: {\n//     value: 0,\n//   },\n//   reducers: {\n//     increment: (state) => {\n//       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n//       // doesn't actually mutate the state because it uses the immer library,\n//       // which detects changes to a \"draft state\" and produces a brand new\n//       // immutable state based off those changes\n//       state.value += 1\n//     },\n//     decrement: (state) => {\n//       state.value -= 1\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload\n//     },\n//   },\n// })\n\n// export const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// // The function below is called a thunk and allows us to perform async logic. It\n// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// // will call the thunk with the `dispatch` function as the first argument. Async\n// // code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value\n\n// export default counterSlice.reducer\n\n// import { createSlice } from '@reduxjs/toolkit'\n\n// // Slice\n// const slice = createSlice({\n//     name: 'todos',\n//     initialState: {\n//         todos: null,\n//     },\n//     reducers: {\n//         addEditDeleteTodoSuccess: (state, action) => {\n//             state.todos = action.payload;\n//         }\n//     },\n// });\n// export default slice.reducer\n\n// // Action\n// const { addEditDeleteTodoSuccess } = slice.actions\n// export const addEditDeleteTodo = (todos) => async dispatch => {\n//     try {\n//         dispatch(addEditDeleteTodoSuccess(todos));\n//     } catch (e) {\n//         return console.error(e.message);\n//     }\n// }\n"],"mappings":";AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAgB9C,IAAMC,mBAA6B,GAAG,EAAE;AAExC,OAAO,IAAMC,kBAAkB,GAAGF,WAAW,CAAC;EAC1CG,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAEH,mBAAmB;EACjCI,QAAQ,EAAE;IACNC,gBAAgB,EAAE,SAAAA,iBAACC,KAAK,EAAEC,MAAM,EAAK;MACjC,OAAAC,kBAAA,CAAWD,MAAM,CAACE,OAAO;IAC7B;EACJ;AACJ,CAAC,CAAC;AAGF,eAAeR,kBAAkB,CAACS,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}