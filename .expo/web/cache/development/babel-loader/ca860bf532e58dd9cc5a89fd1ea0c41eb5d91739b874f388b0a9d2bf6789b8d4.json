{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useState, useContext } from 'react';\nimport { Link, useParams } from 'react-router-native';\nimport { convertYearToSchoolYear } from \"../../../../Functions/calendarFunctions\";\nimport callMsGraph from \"../../../../Functions/microsoftAssets\";\nimport create_UUID from \"../../../../Functions/CreateUUID\";\nimport { accessTokenContent } from \"../../../../../App\";\nimport { siteID } from \"../../../../PaulyConfig\";\nimport { useMsal } from '@azure/msal-react';\nimport { loadingStateEnum } from \"../../../../types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function GovernmentCreateNewTeam() {\n  var microsoftAccessToken = useContext(accessTokenContent);\n  var _useMsal = useMsal(),\n    instance = _useMsal.instance,\n    accounts = _useMsal.accounts;\n  var _useParams = useParams(),\n    sport = _useParams.sport,\n    id = _useParams.id;\n  var _useState = useState(loadingStateEnum.notStarted),\n    _useState2 = _slicedToArray(_useState, 2),\n    createTeamLoadingState = _useState2[0],\n    setCreateTeamLoadingState = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    teamName = _useState4[0],\n    setTeamName = _useState4[1];\n  var _useState5 = useState(new Date().getFullYear()),\n    _useState6 = _slicedToArray(_useState5, 2),\n    season = _useState6[0],\n    setSeason = _useState6[1];\n  function createTeam() {\n    return _createTeam.apply(this, arguments);\n  }\n  function _createTeam() {\n    _createTeam = _asyncToGenerator(function* () {\n      setCreateTeamLoadingState(loadingStateEnum.loading);\n      var newTeamRosterID = create_UUID();\n      var listData = {\n        \"displayName\": newTeamRosterID,\n        \"columns\": [{\n          \"name\": \"PlayerID\",\n          \"text\": {}\n        }],\n        \"list\": {\n          \"contentTypesEnabled\": false,\n          \"hidden\": false,\n          \"template\": \" genericList\"\n        }\n      };\n      var data = {\n        \"fields\": {\n          Title: \"\",\n          TeamName: teamName,\n          Season: season,\n          teamID: newTeamRosterID\n        }\n      };\n      var resultList = yield callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID + \"/lists\", instance, accounts, \"POST\", false, JSON.stringify(listData));\n      if (resultList.ok) {\n        var result = yield callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID + \"/lists/\" + id + \"/items\", instance, accounts, \"POST\", false, JSON.stringify(data));\n        if (result.ok) {\n          setCreateTeamLoadingState(loadingStateEnum.success);\n        } else {\n          setCreateTeamLoadingState(loadingStateEnum.failed);\n        }\n      } else {\n        setCreateTeamLoadingState(loadingStateEnum.failed);\n      }\n    });\n    return _createTeam.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    children: [_jsx(Link, {\n      to: \"/profile/government/sports/team/\" + sport + \"/\" + id,\n      children: _jsx(Text, {\n        children: \"Back\"\n      })\n    }), _jsxs(Text, {\n      children: [\"Government Create a new \", sport, \" Team\"]\n    }), _jsx(Text, {\n      children: \"Team Name\"\n    }), _jsx(TextInput, {\n      value: teamName,\n      onChangeText: function onChangeText(text) {\n        return setTeamName(text);\n      },\n      placeholder: \"Team Name\"\n    }), _jsx(Text, {\n      children: \"Season\"\n    }), _jsx(Text, {\n      children: convertYearToSchoolYear(season)\n    }), _jsx(TextInput, {\n      keyboardType: \"numeric\",\n      onChangeText: function onChangeText(text) {\n        if (text === \"\") {\n          setSeason(0);\n        } else {\n          setSeason(parseFloat(text));\n        }\n      },\n      value: season.toString(),\n      maxLength: 10\n    }), _jsx(Button, {\n      title: createTeamLoadingState === loadingStateEnum.notStarted ? \"CREATE TEAM\" : createTeamLoadingState === loadingStateEnum.loading ? \"LOADING\" : createTeamLoadingState === loadingStateEnum.success ? \"SUCCESS\" : \"FAILED\",\n      onPress: function onPress() {\n        if (createTeamLoadingState === loadingStateEnum.notStarted) {\n          createTeam();\n        } else if (createTeamLoadingState === loadingStateEnum.failed) {\n          setCreateTeamLoadingState(loadingStateEnum.notStarted);\n        }\n      }\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useContext","Link","useParams","convertYearToSchoolYear","callMsGraph","create_UUID","accessTokenContent","siteID","useMsal","loadingStateEnum","jsx","_jsx","jsxs","_jsxs","GovernmentCreateNewTeam","microsoftAccessToken","_useMsal","instance","accounts","_useParams","sport","id","_useState","notStarted","_useState2","_slicedToArray","createTeamLoadingState","setCreateTeamLoadingState","_useState3","_useState4","teamName","setTeamName","_useState5","Date","getFullYear","_useState6","season","setSeason","createTeam","_createTeam","apply","arguments","_asyncToGenerator","loading","newTeamRosterID","listData","data","Title","TeamName","Season","teamID","resultList","accessToken","JSON","stringify","ok","result","success","failed","View","children","to","Text","TextInput","value","onChangeText","text","placeholder","keyboardType","parseFloat","toString","maxLength","Button","title","onPress"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/AuthenticatedView/Profile/Government/GovernmentSports/GovernmentCreateNewTeam.tsx"],"sourcesContent":["import { View, Text, TextInput, Dimensions, Button } from 'react-native'\nimport React, { useState, useEffect, useContext } from 'react'\nimport { Link, useParams } from 'react-router-native'\nimport {convertYearToSchoolYear} from '../../../../Functions/calendarFunctions'\nimport NavBarComponent from '../../../../UI/NavComponent';\nimport callMsGraph from '../../../../Functions/microsoftAssets';\nimport create_UUID from '../../../../Functions/CreateUUID';\nimport { accessTokenContent } from '../../../../../App';\nimport { siteID } from '../../../../PaulyConfig';\nimport { useMsal } from '@azure/msal-react';\nimport { loadingStateEnum } from '../../../../types';\n\nexport default function GovernmentCreateNewTeam() {\n  const microsoftAccessToken = useContext(accessTokenContent);\n  const { instance, accounts } = useMsal();\n  const { sport, id } = useParams()\n\n  const [createTeamLoadingState, setCreateTeamLoadingState] = useState<loadingStateEnum>(loadingStateEnum.notStarted)\n\n  //New Team Data\n  const [teamName, setTeamName] = useState<string>(\"\")\n  const [season, setSeason] = useState<number>(new Date().getFullYear())\n\n  async function createTeam() {\n    setCreateTeamLoadingState(loadingStateEnum.loading)\n    const newTeamRosterID: string = create_UUID()\n    const listData = {\n      \"displayName\":newTeamRosterID,\n      \"columns\": [\n        {\n          \"name\": \"PlayerID\",\n          \"text\": { }\n        }\n      ],\n      \"list\":\n      {\n        \"contentTypesEnabled\": false,\n        \"hidden\": false,\n        \"template\": \" genericList\"\n      }\n    }\n    const data = {\n      \"fields\": {\n        Title: \"\",\n        TeamName: teamName,\n        Season: season,\n        teamID: newTeamRosterID\n      }\n    }\n    const resultList = await callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/\"+siteID+\"/lists\", instance, accounts, \"POST\", false, JSON.stringify(listData))\n    if (resultList.ok){\n      const result = await callMsGraph(microsoftAccessToken.accessToken, \"https://graph.microsoft.com/v1.0/sites/\"+siteID+\"/lists/\" + id + \"/items\", instance, accounts, \"POST\", false, JSON.stringify(data))//TO DO fix id (this isn't really important because it will work anyway it might be better to call for the id though)\n      if (result.ok){\n        setCreateTeamLoadingState(loadingStateEnum.success)\n      } else {\n        setCreateTeamLoadingState(loadingStateEnum.failed)\n      }\n    } else {\n      setCreateTeamLoadingState(loadingStateEnum.failed)\n    }\n  }\n\n  return (\n    <View>\n      <Link to={\"/profile/government/sports/team/\" + sport + \"/\" + id}>\n        <Text>Back</Text>\n      </Link>\n      <Text>Government Create a new {sport} Team</Text>\n      <Text>Team Name</Text>\n      <TextInput\n        value={teamName}\n        onChangeText={text => setTeamName(text)}\n        placeholder='Team Name'\n      />\n      <Text>Season</Text>\n      <Text>{convertYearToSchoolYear(season)}</Text>\n      <TextInput \n        keyboardType='numeric'\n        onChangeText={(text)=> {\n          if (text === \"\"){\n            setSeason(0)\n          } else {\n            setSeason(parseFloat(text))\n          }\n        }}\n        value={season.toString()}\n        maxLength={10}  //setting limit of input\n      />\n      <Button title={(createTeamLoadingState === loadingStateEnum.notStarted) ? \"CREATE TEAM\":(createTeamLoadingState === loadingStateEnum.loading) ? \"LOADING\":(createTeamLoadingState === loadingStateEnum.success) ? \"SUCCESS\":\"FAILED\"} onPress={() => {if (createTeamLoadingState === loadingStateEnum.notStarted) {createTeam()} else if (createTeamLoadingState === loadingStateEnum.failed) {setCreateTeamLoadingState(loadingStateEnum.notStarted)}}}/>\n    </View>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}