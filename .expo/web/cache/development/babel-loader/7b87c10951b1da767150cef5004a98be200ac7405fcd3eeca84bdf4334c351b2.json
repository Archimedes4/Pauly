{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { getEventFromJSON, isDateToday } from \"../../Functions/calendarFunctions\";\nimport { useSelector } from \"react-redux\";\nimport create_UUID from \"../../Functions/CreateUUID\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function DayView(_ref) {\n  var width = _ref.width,\n    height = _ref.height;\n  var colorScheme = useColorScheme();\n  var fullStore = useSelector(function (state) {\n    return state;\n  });\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    heightOffsetTop = _useState2[0],\n    setHeightOffsetTop = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentMinuteInt = _useState4[0],\n    setCurrentMinuteInt = _useState4[1];\n  var _useState5 = useState(\"12:00\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    currentTime = _useState6[0],\n    setCurrentTime = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isShowingTime = _useState8[0],\n    setIsShowingTime = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    hourLength = _useState10[0],\n    setHourLength = _useState10[1];\n  var hoursText = [\"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\", \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\", \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\"];\n  var mainScrollRef = useRef(null);\n  function setCurrentTimeFunction(hour, minuite) {\n    if (minuite.toString().length == 1) {\n      if (hour == 12) {\n        setCurrentTime(\"12:0\" + minuite.toString());\n      } else {\n        setCurrentTime((hour % 12).toString() + \":0\" + minuite.toString());\n      }\n    } else {\n      if (hour == 12) {\n        setCurrentTime(\"12:\" + minuite);\n      } else {\n        setCurrentTime((hour % 12).toString() + \":\" + minuite.toString());\n      }\n    }\n  }\n  function loadCalendarContent() {\n    var _mainScrollRef$curren;\n    var currentDate = new Date();\n    var resultHeightTopOffset = findTimeOffset(currentDate, height);\n    setHeightOffsetTop(resultHeightTopOffset);\n    var minuiteInt = currentDate.getMinutes();\n    setCurrentMinuteInt(minuiteInt);\n    var hourInt = currentDate.getHours();\n    setCurrentTimeFunction(hourInt, minuiteInt);\n    (_mainScrollRef$curren = mainScrollRef.current) == null ? void 0 : _mainScrollRef$curren.scrollTo({\n      x: 0,\n      y: resultHeightTopOffset,\n      animated: false\n    });\n    console.log(\"This\", resultHeightTopOffset);\n  }\n  useEffect(function () {\n    var interval = setInterval(function () {\n      updateOnTimeChange();\n    }, 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  function updateOnTimeChange() {\n    var minuiteInt = new Date().getMinutes();\n    if (currentMinuteInt != minuiteInt) {\n      setCurrentMinuteInt(minuiteInt);\n      var hourInt = new Date().getHours();\n      if (minuiteInt.toString().length == 1) {\n        setCurrentTimeFunction(hourInt, minuiteInt);\n      } else {\n        setCurrentTimeFunction(hourInt, minuiteInt);\n      }\n      setHeightOffsetTop(findTimeOffset(new Date(), height));\n    }\n  }\n  useEffect(function () {\n    setHourLength(height * 0.1);\n    loadCalendarContent();\n  }, []);\n  return _jsx(View, {\n    style: {\n      height: height,\n      width: width\n    },\n    children: _jsx(ScrollView, {\n      style: {\n        height: height,\n        width: width\n      },\n      ref: mainScrollRef,\n      children: _jsxs(View, {\n        children: [_jsx(View, {\n          children: isShowingTime ? _jsx(View, {\n            children: hoursText.map(function (value) {\n              return _jsxs(View, {\n                style: {\n                  flexDirection: \"row\",\n                  height: hourLength\n                },\n                children: [calculateIfShowing(value, new Date(JSON.parse(fullStore.selectedDate))) ? _jsx(View, {\n                  children: _jsx(Text, {\n                    style: {\n                      color: colorScheme == \"dark\" ? \"white\" : \"black\"\n                    },\n                    children: value\n                  })\n                }) : null, _jsx(View, {\n                  style: {\n                    backgroundColor: \"black\",\n                    width: width * 0.9,\n                    height: 6,\n                    position: \"absolute\",\n                    right: 0\n                  }\n                })]\n              }, value + \"_\" + create_UUID());\n            })\n          }) : null\n        }), _jsx(View, {\n          children: fullStore.currentEvents.map(function (event) {\n            return _jsx(View, {\n              children: _jsx(EventBlock, {\n                event: getEventFromJSON(event),\n                width: width,\n                height: 0\n              })\n            });\n          })\n        }), new Date(JSON.parse(fullStore.selectedDate)).getDate() === new Date().getDate() && new Date(JSON.parse(fullStore.selectedDate)).getMonth() === new Date().getMonth() && new Date(JSON.parse(fullStore.selectedDate)).getFullYear() === new Date().getFullYear() ? _jsxs(View, {\n          style: {\n            position: \"absolute\",\n            top: heightOffsetTop,\n            height: height * 0.005,\n            width: width,\n            flexDirection: \"row\",\n            alignItems: \"center\"\n          },\n          children: [_jsx(Text, {\n            style: {\n              color: \"red\",\n              zIndex: 2\n            },\n            children: currentTime\n          }), _jsx(View, {\n            style: {\n              backgroundColor: \"red\",\n              width: width * 0.914,\n              height: 6,\n              position: \"absolute\",\n              right: 0\n            }\n          })]\n        }) : null]\n      })\n    })\n  });\n}\nfunction EventBlock(_ref2) {\n  var event = _ref2.event,\n    width = _ref2.width,\n    height = _ref2.height;\n  var Offset = computeNewDate(event.startTime, event.endTime, height);\n  return _jsxs(View, {\n    style: {\n      width: width * 0.8,\n      height: Offset,\n      marginLeft: width * 0.2,\n      backgroundColor: event.eventColor,\n      opacity: 0.6\n    },\n    children: [_jsx(Text, {\n      children: event.name\n    }), _jsxs(Text, {\n      children: [event.startTime.toISOString(), \" to \", event.endTime.toISOString()]\n    })]\n  });\n}\nfunction calculateIfShowing(value, Time) {\n  if (isDateToday(Time)) {\n    var hourInt = Time.getHours();\n    var minuiteInt = Time.getMinutes();\n    if (minuiteInt + 15 >= 60) {\n      var resepctiveTime = \"\" + (hourInt > 12) ? (hourInt - 12).toString() : hourInt.toString();\n      resepctiveTime += hourInt > 12 ? \"PM\" : \"AM\";\n      if (resepctiveTime === value) {\n        return false;\n      } else {\n        return true;\n      }\n    } else if (minuiteInt - 15 <= 0) {\n      var resepctiveTime = \"\" + (hourInt > 12) ? (hourInt - 12).toString() : hourInt.toString();\n      resepctiveTime += hourInt > 12 ? \"PM\" : \"AM\";\n      if (resepctiveTime === value) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return true;\n  }\n}\nfunction findTimeOffset(time, height) {\n  var hourWidth = height * 0.1;\n  var minutieWidth = height * 0.1 / 60;\n  var hourInt = time.getHours();\n  var minuiteInt = time.getMinutes();\n  var returnOffset = hourWidth * hourInt + minutieWidth * minuiteInt;\n  return returnOffset;\n}\nfunction FindPeriod(classCourse, day) {\n  var PeriodInt = 0;\n  if (day == \"A\") {\n    PeriodInt = classCourse.dayA;\n  } else {\n    if (day == \"B\") {\n      PeriodInt = classCourse.dayB;\n    } else {\n      if (day == \"C\") {\n        PeriodInt = classCourse.dayC;\n      } else {\n        if (day == \"D\") {\n          PeriodInt = classCourse.dayD;\n        }\n      }\n    }\n  }\n  return PeriodInt;\n}\nfunction getEventColor(monthInt, dayInt, Class) {\n  var colorResult = \"white\";\n  for (var index = 0; index < Class.assignments.length; index++) {\n    var x = Class.assignments[index];\n    if (x.assignmentDuringClass) {\n      if (x.selectedMonth == monthInt) {\n        if (x.selectedDay == dayInt) {\n          if (x.assignmentEnum == 0) {\n            return \"purple\";\n          } else if (x.assignmentEnum == 1) {\n            return \"red\";\n          } else if (x.assignmentEnum == 2) {\n            return \"yellow\";\n          } else if (x.assignmentEnum == 3) {\n            return \"orange\";\n          } else if (x.assignmentEnum == 4) {\n            return \"blue\";\n          } else {\n            return \"green\";\n          }\n        }\n      }\n    }\n  }\n  return colorResult;\n}\nfunction computeNewDate(fromDate, toDate, height) {\n  var delta = toDate.getTime() - fromDate.getTime();\n  var deltaInt = delta;\n  var deltaHours = deltaInt / 3600;\n  var deltaRemaining = deltaInt % 3600;\n  var deltaMinutes = deltaRemaining / 60;\n  var NewHourHeight = height / 24;\n  var NewHeight = height - NewHourHeight;\n  var HourWidth = NewHeight / 24;\n  var MinutieWidth = NewHeight / 1440;\n  var ReturnOffset = HourWidth * deltaHours + MinutieWidth * deltaMinutes;\n  return ReturnOffset;\n}\nfunction findOffsetEvent(time, height) {\n  var hourWidth = height * 0.1;\n  var minutieWidth = height * 0.1 / 60;\n  var HourInt = time.getHours();\n  var MinuiteInt = time.getMinutes();\n  var ReturnOffset = hourWidth * HourInt + minutieWidth * MinuiteInt + hourWidth / 2;\n  return ReturnOffset;\n}","map":{"version":3,"names":["useEffect","useRef","useState","View","ScrollView","useColorScheme","Text","getEventFromJSON","isDateToday","useSelector","create_UUID","jsx","_jsx","jsxs","_jsxs","DayView","_ref","width","height","colorScheme","fullStore","state","_useState","_useState2","_slicedToArray","heightOffsetTop","setHeightOffsetTop","_useState3","_useState4","currentMinuteInt","setCurrentMinuteInt","_useState5","_useState6","currentTime","setCurrentTime","_useState7","_useState8","isShowingTime","setIsShowingTime","_useState9","_useState10","hourLength","setHourLength","hoursText","mainScrollRef","setCurrentTimeFunction","hour","minuite","toString","length","loadCalendarContent","_mainScrollRef$curren","currentDate","Date","resultHeightTopOffset","findTimeOffset","minuiteInt","getMinutes","hourInt","getHours","current","scrollTo","x","y","animated","console","log","interval","setInterval","updateOnTimeChange","clearInterval","style","children","ref","map","value","flexDirection","calculateIfShowing","JSON","parse","selectedDate","color","backgroundColor","position","right","currentEvents","event","EventBlock","getDate","getMonth","getFullYear","top","alignItems","zIndex","_ref2","Offset","computeNewDate","startTime","endTime","marginLeft","eventColor","opacity","name","toISOString","Time","resepctiveTime","time","hourWidth","minutieWidth","returnOffset","FindPeriod","classCourse","day","PeriodInt","dayA","dayB","dayC","dayD","getEventColor","monthInt","dayInt","Class","colorResult","index","assignments","assignmentDuringClass","selectedMonth","selectedDay","assignmentEnum","fromDate","toDate","delta","getTime","deltaInt","deltaHours","deltaRemaining","deltaMinutes","NewHourHeight","NewHeight","HourWidth","MinutieWidth","ReturnOffset","findOffsetEvent","HourInt","MinuiteInt"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/AuthenticatedView/Calendar/DayView.tsx"],"sourcesContent":["//\n//  DayView.tsx\n//  Pauly\n//\n//  Created by Andrew Mainella on 2023-07-21.\n//\nimport { useEffect, useRef, useState } from \"react\"\nimport {View, ScrollView, useColorScheme, Text} from \"react-native\"\nimport { useSearchParams } from \"react-router-native\"\nimport { getEventFromJSON, isDateToday } from \"../../Functions/calendarFunctions\"\nimport { useSelector } from \"react-redux\"\nimport { RootState } from \"../../Redux/store\"\nimport create_UUID from \"../../Functions/CreateUUID\"\n\ndeclare global {\n    type calendarCourseType = {\n        name: String\n        semester: number\n        dayA: number\n        dayB: number\n        dayC: number\n        dayD: number\n        noClass: noClassType[]\n        year: number\n        assignments: assignmentTypeQuiz[]\n    }\n    type noClassType = {\n        day: number\n        Month: number\n        Year: number\n    }\n    type assignmentTypeQuiz = {\n        id: string\n        title: string\n        description: string\n        assignmentEnum: number\n        documentRef: string\n        assignmentDuringClass: boolean\n        selectedMonth?: number\n        selectedDay?: number\n        dueDate?: Date\n    }\n}\n\nexport default function DayView({width, height}:{width: number, height: number}) {\n    const colorScheme = useColorScheme();\n    const fullStore = useSelector((state: RootState) => state)\n    const [heightOffsetTop, setHeightOffsetTop] = useState<number>(0)\n    const [currentMinuteInt, setCurrentMinuteInt] = useState<number>(0)\n    const [currentTime, setCurrentTime] = useState<string>(\"12:00\")\n    const [isShowingTime, setIsShowingTime] = useState<boolean>(true)\n    const [hourLength, setHourLength] = useState<number>(0)\n    const hoursText: string[] = [\"12AM\", \"1AM\", \"2AM\", \"3AM\", \"4AM\", \"5AM\", \"6AM\", \"7AM\", \"8AM\", \"9AM\", \"10AM\", \"11AM\", \"12PM\", \"1PM\", \"2PM\", \"3PM\", \"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\",\"10PM\", \"11PM\"]\n    const mainScrollRef = useRef<ScrollView>(null)\n\n    function setCurrentTimeFunction(hour: number, minuite: number){\n        if (minuite.toString().length == 1) {\n            if (hour == 12) {\n                setCurrentTime(\"12:0\"+minuite.toString())\n            } else {\n                setCurrentTime((hour % 12).toString() + \":0\" + minuite.toString())\n            }\n        } else {\n            if (hour == 12) {\n                setCurrentTime(\"12:\"+minuite)\n            } else {\n                setCurrentTime((hour % 12).toString() + \":\" + minuite.toString())\n            }\n        }\n    }\n\n    function loadCalendarContent() {\n        //GetStudentSchedule()\n        const currentDate = new Date\n        const resultHeightTopOffset = findTimeOffset(currentDate, height)\n        setHeightOffsetTop(resultHeightTopOffset)\n        const minuiteInt: number = currentDate.getMinutes()\n        setCurrentMinuteInt(minuiteInt)\n        const hourInt = currentDate.getHours()\n        setCurrentTimeFunction(hourInt, minuiteInt)\n        mainScrollRef.current?.scrollTo({ x: 0, y: resultHeightTopOffset, animated: false});\n        console.log(\"This\", resultHeightTopOffset)\n        // if (heightOffsetTop >= height){\n        //     setScrollPosition(height)\n        //     mainScrollRef.current?.scrollTo({ x: 0, y: height, animated: true });\n        // } else {\n        //     setScrollPosition(heightOffsetTop)\n        // }\n    }\n    //https://stackoverflow.com/questions/65049812/how-to-call-a-function-every-minute-in-a-react-component\n    //Upadtes every second\n    useEffect(() => {\n        const interval = setInterval(() => {\n            updateOnTimeChange()\n        }, 1000);\n\n        return () => clearInterval(interval); // This represents the unmount function, in which you need to clear your interval to prevent memory leaks.\n    }, [])\n    function updateOnTimeChange() {\n        let minuiteInt = new Date().getMinutes()\n        if (currentMinuteInt != minuiteInt!) {\n            setCurrentMinuteInt(minuiteInt)\n            \n            let hourInt = new Date().getHours()\n            if (minuiteInt.toString().length == 1){\n                setCurrentTimeFunction(hourInt, minuiteInt)\n            } else {\n                setCurrentTimeFunction(hourInt, minuiteInt)\n            }\n            setHeightOffsetTop(findTimeOffset(new Date, height))\n        }\n    }\n\n    useEffect(() => {\n        setHourLength(height * 0.1)\n        loadCalendarContent()\n    }, [])\n\n    // useEffect(() => {\n    //     findDateProperty(selectedDay)\n    // }, [selectedDay])\n\n    return (\n        <View style={{height: height, width: width}}>\n            <ScrollView style={{height: height, width: width}} ref={mainScrollRef}>\n                <View>\n                    <View>\n                        { isShowingTime ?\n                            <View>\n                                {hoursText.map((value) => (\n                                    <View key={value+\"_\"+create_UUID()} style={{flexDirection: \"row\", height: hourLength}}>\n                                        { (calculateIfShowing(value, new Date(JSON.parse(fullStore.selectedDate)))) ?\n                                            <View><Text style={{color: (colorScheme == \"dark\") ? \"white\":\"black\"}}>{value}</Text></View>:null\n                                        }\n                                        <View style={{backgroundColor: \"black\", width: width * 0.9, height: 6, position: \"absolute\", right: 0}} />\n                                    </View>\n                                ))}\n                            </View>:null\n                        }\n                    </View>\n                    <View>\n                        { fullStore.currentEvents.map((event) => (\n                            <View>\n                                <EventBlock event={getEventFromJSON(event)} width={width} height={0} />\n                            </View>\n                        ))}\n                    </View>\n                    { (new Date(JSON.parse(fullStore.selectedDate)).getDate() === new Date().getDate() && new Date(JSON.parse(fullStore.selectedDate)).getMonth() === new Date().getMonth() && new Date(JSON.parse(fullStore.selectedDate)).getFullYear() === new Date().getFullYear()) ?\n                        <View style={{position: \"absolute\", top: heightOffsetTop, height: height * 0.005, width: width, flexDirection: \"row\", alignItems: \"center\"}}>\n                            <Text style={{color: \"red\", zIndex: 2}}>{currentTime}</Text>\n                            <View style={{backgroundColor: \"red\", width: width * 0.914, height: 6, position: \"absolute\", right: 0}}/>                       \n                        </View>:null\n                    }   \n                </View>\n            </ScrollView>\n        </View>\n    )\n}\n\nfunction EventBlock({event, width, height}:{event: eventType, width: number, height: number}) {\n    const Offset = computeNewDate(event.startTime, event.endTime, height)\n    return (\n    <View style={{width: width * 0.8, height: Offset, marginLeft: width * 0.2, backgroundColor: event.eventColor, opacity: 0.6}}>\n            <Text>{event.name}</Text>\n            <Text>{event.startTime.toISOString()} to {event.endTime.toISOString()}</Text>\n    </View>\n    )\n}\n\nfunction calculateIfShowing(value: String, Time: Date): boolean { //TO DO shorten\n    if (isDateToday(Time)) {\n        const hourInt = Time.getHours()\n        const minuiteInt = Time.getMinutes()\n        if (minuiteInt + 15 >= 60){\n            var resepctiveTime: string = \"\" + (hourInt > 12) ? (hourInt - 12).toString():hourInt.toString()\n            resepctiveTime += (hourInt > 12) ? \"PM\":\"AM\"\n            if (resepctiveTime === value){\n                return false\n            } else {\n                return true\n            }\n        } else if (minuiteInt - 15 <= 0) {\n            var resepctiveTime: string = \"\" + (hourInt > 12) ? (hourInt - 12).toString():hourInt.toString()\n            resepctiveTime += (hourInt > 12) ? \"PM\":\"AM\"\n            if (resepctiveTime === value){\n                return false\n            } else {\n                return true\n            }\n        } else {\n            return true\n        }\n    } else {\n        return true\n    }\n}\nfunction findTimeOffset(time: Date, height: number): number {\n    let hourWidth = height * 0.1\n    let minutieWidth = (height * 0.1)/60\n    let hourInt = time.getHours() \n    let minuiteInt = time.getMinutes()\n    var returnOffset = (hourWidth * hourInt) + (minutieWidth * minuiteInt)\n    // + (hourWidth/2)\n    return returnOffset\n}\n\n// function getDate(hour: number, minute: number, Time: Date): Date {\n//     // Specify date components\n//     var dateComponents = DateComponents()\n//     dateComponents.year =  Calendar.current.dateComponents([.year], from: Time).year\n//     dateComponents.month = Calendar.current.dateComponents([.month], from: Time).month\n//     dateComponents.day = Calendar.current.dateComponents([.day], from: Time).day\n//     dateComponents.timeZone = TimeZone(abbreviation: \"CDT\")\n//     dateComponents.hour = Hour\n//     dateComponents.minute = Minute\n\n//     // Create date from components\n//     let userCalendar = Calendar(identifier: .gregorian) // since the components above (like year 1980) are for Gregorian\n//     let someDateTime = userCalendar.date(from: dateComponents)\n//     return someDateTime!\n// }\n\nfunction FindPeriod(classCourse: calendarCourseType, day: string): number{\n    var PeriodInt = 0\n    if (day == \"A\") {\n        PeriodInt = classCourse.dayA\n    } else {\n        if (day == \"B\") {\n            PeriodInt = classCourse.dayB\n        } else {\n            if (day == \"C\"){\n                PeriodInt = classCourse.dayC\n            } else {\n                if (day == \"D\") {\n                    PeriodInt = classCourse.dayD\n                }\n            }\n        }\n    }\n    return PeriodInt\n}\n\n//Ryan was here April 13, 2023\n//Andrew was here April 13, 2023\n\nfunction getEventColor(monthInt: number, dayInt: number, Class: calendarCourseType): string {\n    var colorResult = \"white\"\n    for(let index = 0; index < Class.assignments.length; index++) {\n        const x = Class.assignments[index]\n        if (x.assignmentDuringClass) {\n            if (x.selectedMonth! == monthInt) {\n                if (x.selectedDay! == dayInt) {\n                    if (x.assignmentEnum == 0) {\n                        return \"purple\"\n                    } else if (x.assignmentEnum == 1) {\n                        return \"red\"\n                    } else if (x.assignmentEnum == 2) {\n                        return \"yellow\"\n                    } else if (x.assignmentEnum == 3) {\n                        return \"orange\"\n                    } else if (x.assignmentEnum == 4) {\n                        return \"blue\"\n                    } else {\n                         return \"green\"\n                    }\n                }\n            }\n        }\n    }\n    return colorResult\n}\n\nfunction computeNewDate(fromDate: Date, toDate: Date, height: number): number {\n    let delta = toDate.getTime() - fromDate.getTime()\n    \n    let deltaInt = delta\n    let deltaHours = deltaInt / 3600\n    let deltaRemaining = deltaInt % 3600\n    let deltaMinutes = deltaRemaining / 60\n    \n    let NewHourHeight = height / 24\n    let NewHeight = height - NewHourHeight\n    let HourWidth = NewHeight / 24\n    let MinutieWidth = NewHeight / 1440\n    \n    // print(\"This is delta \\(delta)\")\n    // print(\"This is delta hours \\(deltaHours)\")\n    // print(\"This is delta minute \\(deltaMinutes)\")\n    \n    let ReturnOffset = (HourWidth * deltaHours) + (MinutieWidth * deltaMinutes)\n    return ReturnOffset\n}\n\nfunction findOffsetEvent(time: Date, height: number): number{\n    let hourWidth = height * 0.1\n    let minutieWidth = (height * 0.1) / 60\n    \n    let HourInt = time.getHours()\n    let MinuiteInt = time.getMinutes()\n    let ReturnOffset = (hourWidth * HourInt) + (minutieWidth * MinuiteInt!) + (hourWidth / 2)\n    return ReturnOffset\n}\n\n\n//TO DO LATER\n\n// function GetAssignments(Grade: Int, Name:String, Section:Int, Year: Int?, completetion: @escaping ([AssignmentTypeQuiz]) -> ()) {\n//     var YearVar = Year\n//     let db = Firestore.firestore()\n    \n//     var docRef = db.collection(\"Info\")\n//     if Section == 0{\n//         docRef = db.collection(\"Grade\\(Grade)Courses\").document(\"\\(Name)\").collection(\"Sections\").document(\"\\(Section)\").collection(\"Assignment\")\n//     } else {\n//         docRef = db.collection(\"Grade\\(Grade)Courses\").document(\"\\(Name)\").collection(\"Sections\").document(\"\\(Section)-\\(Year!)\").collection(\"Assignment\")\n//     }\n    \n//     var AssignmentTypeArray: [AssignmentTypeQuiz] = []\n    \n//     if Year == nil{\n//         YearVar = 0\n//     }\n    \n//     docRef.getDocuments() { (querySnapshot, error) in\n//         if let error = error {\n//             print(\"Error getting documents: \\(error)\")\n//         } else {\n//             for document in querySnapshot!.documents {\n//                 let data = document.data()\n//                 print(data)\n//                  guard let AssignmentTitle = data[\"Title\"] as? String else {\n//                      return\n//                  }\n//                  guard let AssignmnetDescription = data[\"Description\"] as? String else {\n//                      print(\"Description\")\n//                      return\n//                  }\n//                  guard let AssignmentEnum = data[\"AssignmentType\"] as? Int else {\n//                      print(\"Type\")\n//                      return\n//                  }\n//                 guard let AssignmentDuringClass = data[\"AssignmentDuringClass\"] as? Bool else {\n//                     print(\"During Class\")\n//                     return\n//                 }\n//                 let documentID = document.documentID\n//                 if AssignmentDuringClass{\n//                     guard let AssignmentMonth = data[\"Month\"] as? Int else {\n//                         return\n//                     }\n//                     guard let AssignmentDay = data[\"Day\"] as? Int else {\n//                         return\n//                     }\n//                     AssignmentTypeArray.append(AssignmentTypeQuiz(Title: AssignmentTitle, Description: AssignmnetDescription, DueDate: nil, AssignmentEnum: AssignmentEnum, DocumentRef: documentID, Class: CourseSelectedType(Name: Name, Section: Section, Year: YearVar!, Grade: Grade), AssignmentDuringClass: AssignmentDuringClass, SelectedMonth: AssignmentMonth, SelectedDay: AssignmentDay))\n//                 } else {\n//                     guard let AssignmentDueDateTime = data[\"DueDate\"] as? Timestamp else {\n//                         return\n//                     }\n//                     let AssignmentDueDate = AssignmentDueDateTime.dateValue()\n//                     AssignmentTypeArray.append(AssignmentTypeQuiz(Title: AssignmentTitle, Description: AssignmnetDescription, DueDate: AssignmentDueDate, AssignmentEnum: AssignmentEnum, DocumentRef: documentID, Class: CourseSelectedType(Name: Name, Section: Section, Year: YearVar!, Grade: Grade), AssignmentDuringClass: AssignmentDuringClass, SelectedMonth: nil, SelectedDay: nil))\n//                 }\n//             }\n//             completetion(AssignmentTypeArray)\n//         }\n//     }\n// }\n\n\n// function getStudentSchedule() {\n//     if (WindowMode.TimesRecieved == false) {\n//         var CurrentIndex: Int = 0\n//         for x in WindowMode.SelectedCourses{\n//             CurrentIndex += 1\n//             let db = FirebaseFirestore.Firestore.firestore()\n    \n//             let docRef = db.collection(\"Grade\\(x.Grade)Courses\").document(x.Name).collection(\"Sections\").document(\"\\(x.Section)-\\(x.Year)\")\n            \n//             docRef.getDocument { (document, error) in\n//                 guard error == nil else {\n//                     print(\"error\", error ?? \"\")\n//                     return\n//                 }\n\n//                 if let document = document, document.exists {\n//                     let data = document.data()\n//                     if let data = data {\n//                         let Semester = data[\"Semester\"] as? Int\n//                         guard let DayA = data[\"DayA\"] as? Int else{\n//                             return\n//                         }\n//                         guard let DayB = data[\"DayB\"] as? Int else {\n//                             return\n//                         }\n//                         guard let DayC = data[\"DayC\"] as? Int else {\n//                             return\n//                         }\n//                         guard let DayD = data[\"DayD\"] as? Int else {\n//                             return\n//                         }\n//                         let NoClass = data[\"NoClass\"] as! NSArray as? [String]\n//                         let Year = data[\"School Year\"] as? Int ?? 2020\n//                         var NoClassesOutArray: [NoClassType] = []\n//                         if NoClass != nil{\n//                             for l in NoClass!{\n//                                 let Output = l.split(separator: \"-\")\n//                                 NoClassesOutArray.append(NoClassType(Day: Int(Output[0])!, Month: Int(Output[1])!, Year: Int(Output[2])!))\n//                             }\n//                         }\n//                         GetAssignments(Grade: x.Grade, Name: x.Name, Section: x.Section, Year: x.Year){ assignmentIN in\n//                             CalendarClasses.append(CalendarCourseType(Name: x.Name, Semester: Semester!, DayA: DayA, DayB: DayB, DayC: DayC, DayD: DayD, NoClass: NoClassesOutArray, Year: Year, Assignments: assignmentIN))\n//                             if CurrentIndex == WindowMode.SelectedCourses.count{\n//                                 FindDateProperty(Time: SelectedDay)\n//                                 print(\"This is date propertry \\(CurrentEvents)\")\n//                             }\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// function findDateProperty(time: Date){\n//     let YearInt = time.getFullYear()\n//     let monthInt = time.getMonth()\n//     try {\n//         var newSelectedDate: DateProperty[] = []\n        \n//         let docRef = db.collection(\"Calendar\").document(\"\\(YearInt!)\").collection(\"\\(monthInt!)\")\n//         docRef.getDocuments { (snapshot, error) in\n//             guard let snapshot = snapshot, error == nil else {\n//              //handle error\n//              return\n//            }\n\n//            snapshot.documents.forEach({ (documentSnapshot) in\n//                 let documentData = documentSnapshot.data()\n//                 let day = documentData[\"Day\"] as? Int\n//                 if day != nil{\n//                     let value = documentData[\"value\"] as? Int\n//                     let SchoolDay = documentData[\"SchoolDay\"] as? String\n//                     if value != nil{\n//                         if value == 1{\n//                             NewSelectedDate.append({Date: day!, ColorName: \"#ce0909\", SchoolDay: SchoolDay, Value: 1})\n//                         } else if value == 2{\n//                             NewSelectedDate.append({Date: day!, ColorName: \"#762e05\", SchoolDay: SchoolDay, Value: 2}) \n//                         } else if value == 3{\n//                             NewSelectedDate.append({Date: day!, ColorName: \"#9309ce\", SchoolDay: SchoolDay, Value: 3})\n//                         } else if value == 4{\n//                             NewSelectedDate.append({Date: day!, ColorName: \"#05760e\", SchoolDay: SchoolDay, Value: 4})                                     \n//                         } else if (value == 5){\n//                             NewSelectedDate.append({Date: day!, ColorName: \"#f6c72c\", SchoolDay: SchoolDay, Value: 5})\n//                         } else if value == 6{\n//                             NewSelectedDate.append({Date: day!, ColorName: \"#2c47f6\", SchoolDay: SchoolDay, Value: 6})\n//                         } else if value == 7{\n//                             NewSelectedDate.append({Date: day!, ColorName: \"#f62cce\", SchoolDay: SchoolDay, Value: 7})\n//                         }\n//                     } else {\n//                         let SchoolDay = documentData[\"SchoolDay\"] as? String\n//                         NewSelectedDate.append({Date: day!, ColorName: nil, SchoolDay: SchoolDay, Value: nil})\n//                     }\n                   \n//                 }\n//            })\n//             CurrentEvents = []\n//             let DayInt = Calendar.current.dateComponents([.day], from: Time).day\n//             if let CurrentDayProperty = NewSelectedDate.first(where: { $0.Date == DayInt }){\n//                 if CurrentDayProperty.SchoolDay != nil{\n//                     for o in CalendarClasses{\n//                         if o.Year == YearInt{\n//                             if monthInt! >= 2 && monthInt! <= 8{\n//                                 if o.Semester == 2{\n//                                     if o.NoClass.contains(where: { $0.Day == DayInt && $0.Month == monthInt && $0.Year == YearInt }){\n//                                         continue\n//                                     } else {\n//                                         let PeriodInt = FindPeriod(Class: o, Day: CurrentDayProperty.SchoolDay!)\n//                                         let OutputIntTimes = FindStartHourMinute(PeriodInt: PeriodInt, Schedule: CurrentDayProperty.Value)\n//                                         let StartDate = GetDate(OutputIntTimes.0, OutputIntTimes.1, Time: Time)\n//                                         let EndDate = GetDate(OutputIntTimes.2, OutputIntTimes.3, Time: Time)\n//                                         let EventColor = GetEventColor(MonthInt: monthInt!, DayInt: DayInt!, Class: o)\n//                                         CurrentEvents.append(EventType(Name: o.Name, StartTime: StartDate, EndTime: EndDate, EventColor: EventColor))\n//                                     }\n//                                 }\n//                             } else {\n//                                 if o.Semester == 1{\n//                                     if o.NoClass.contains(where: { $0.Day != DayInt && $0.Month != monthInt && $0.Year != YearInt }){\n//                                         continue\n//                                     } else {\n//                                         let PeriodInt = FindPeriod(Class: o, Day: CurrentDayProperty.SchoolDay!)\n//                                         let OutputIntTimes = FindStartHourMinute(PeriodInt: PeriodInt, Schedule: CurrentDayProperty.Value)\n//                                         let StartDate = GetDate(Hour: OutputIntTimes.0, Minute: OutputIntTimes.1, Time: Time)\n//                                         let EndDate = GetDate(Hour: OutputIntTimes.2, Minute: OutputIntTimes.3, Time: Time)\n//                                         let EventColor = GetEventColor(MonthInt: monthInt!, DayInt: DayInt!, Class: o)\n//                                         CurrentEvents.append(EventType(Name: o.Name, StartTime: StartDate, EndTime: EndDate, EventColor: EventColor))\n//                                     }\n//                                 }\n//                             }\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     } catch {\n//         print(\"Error\")\n//     }\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}