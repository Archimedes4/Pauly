{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-native';\nimport { accessTokenContent } from \"../../../App\";\nimport { findFirstDayinMonth, getEventFromJSON } from \"../../Functions/calendarFunctions\";\nimport { getGraphEvents } from \"../../Functions/calendarFunctionsGraph\";\nimport create_UUID from \"../../Functions/CreateUUID\";\nimport DayView from \"./DayView\";\nimport Week from \"./Week\";\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { orgWideGroupID } from \"../../PaulyConfig\";\nimport AddEvent from \"./AddEvent\";\nimport CalendarTypePicker from \"../../UI/CalendarTypePicker\";\nimport { AddIcon, ChevronLeft, ChevronRight } from \"../../UI/Icons/Icons\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectedDateSlice } from \"../../Redux/reducers/selectedDateReducer\";\nimport { currentEventsSlice } from \"../../Redux/reducers/currentEventReducer\";\nimport { useMsal } from '@azure/msal-react';\nimport { loadingStateEnum } from \"../../types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowDimensions = Dimensions.get('window');\nvar screenDimensions = Dimensions.get('screen');\nvar calendarMode = function (calendarMode) {\n  calendarMode[calendarMode[\"month\"] = 0] = \"month\";\n  calendarMode[calendarMode[\"week\"] = 1] = \"week\";\n  calendarMode[calendarMode[\"day\"] = 2] = \"day\";\n  return calendarMode;\n}(calendarMode || {});\nvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nexport default function Calendar(_ref) {\n  var governmentMode = _ref.governmentMode;\n  var pageData = useContext(accessTokenContent);\n  var _useMsal = useMsal(),\n    instance = _useMsal.instance,\n    accounts = _useMsal.accounts;\n  var _useState = useState(calendarMode.month),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedCalendarMode = _useState2[0],\n    setSelectedCalendarMode = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isShowingAddDate = _useState4[0],\n    setIsShowingAddDate = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isEditing = _useState6[0],\n    setIsEditing = _useState6[1];\n  var _useState7 = useState(undefined),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedEvent = _useState8[0],\n    setSelectedEvent = _useState8[1];\n  var selectedDate = useSelector(function (state) {\n    return state.selectedDate;\n  });\n  var dispatch = useDispatch();\n  var _useFonts = useFonts({\n      'BukhariScript': require(\"../../../assets/fonts/BukhariScript.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  function getEvents() {\n    return _getEvents.apply(this, arguments);\n  }\n  function _getEvents() {\n    _getEvents = _asyncToGenerator(function* () {\n      var selectedDateOut = new Date(JSON.parse(selectedDate));\n      var startDate = new Date(selectedDateOut.getFullYear(), selectedDateOut.getMonth(), 1);\n      var endDate = new Date(selectedDateOut.getFullYear(), selectedDateOut.getMonth() + 1, 0);\n      var outputEvents = [];\n      var personalCalendarResult = yield getGraphEvents(pageData.accessToken, false, instance, accounts, \"https://graph.microsoft.com/v1.0/me/calendarView?startDateTime=\" + startDate.toISOString() + \"&endDateTime=\" + endDate.toISOString(), \"https://graph.microsoft.com/v1.0/me/events/\");\n      if (personalCalendarResult.result === loadingStateEnum.success) {\n        outputEvents = personalCalendarResult.events;\n        var url = personalCalendarResult.nextLink !== undefined ? personalCalendarResult.nextLink : \"\";\n        var notFound = personalCalendarResult.nextLink !== undefined ? true : false;\n        while (notFound) {\n          var furtherResult = yield getGraphEvents(microsoftAccessToken.accessToken, false, instance, accounts, url, \"https://graph.microsoft.com/v1.0/me/events/\");\n          if (furtherResult.result === loadingStateEnum.success) {\n            outputEvents = [].concat(_toConsumableArray(outputEvents), _toConsumableArray(furtherResult.events));\n            url = furtherResult.nextLink !== undefined ? furtherResult.nextLink : \"\";\n            notFound = furtherResult.nextLink !== undefined ? true : false;\n          } else {\n            notFound = false;\n          }\n        }\n      }\n      var orgEventsResult = yield getGraphEvents(pageData.accessToken, false, instance, accounts, \"https://graph.microsoft.com/v1.0/groups/\" + orgWideGroupID + \"/calendar/events?$filter=start/dateTime%20ge%20'\" + startDate.toISOString() + \"'%20and%20end/dateTime%20le%20'\" + endDate.toISOString() + \"'\", \"https://graph.microsoft.com/v1.0/groups/\" + orgWideGroupID + \"/calendar/events/\");\n      if (orgEventsResult.result === loadingStateEnum.success) {\n        outputEvents = [].concat(_toConsumableArray(outputEvents), _toConsumableArray(orgEventsResult.events));\n        var url = orgEventsResult.nextLink !== undefined ? orgEventsResult.nextLink : \"\";\n        var notFound = orgEventsResult.nextLink !== undefined ? true : false;\n        while (notFound) {\n          var _furtherResult = yield getGraphEvents(microsoftAccessToken.accessToken, false, instance, accounts, url, \"https://graph.microsoft.com/v1.0/groups/\" + orgWideGroupID + \"/calendar/events/\");\n          console.log(_furtherResult);\n          if (_furtherResult.result === loadingStateEnum.success) {\n            outputEvents = [].concat(_toConsumableArray(outputEvents), _toConsumableArray(_furtherResult.events));\n            url = _furtherResult.nextLink !== undefined ? _furtherResult.nextLink : \"\";\n            notFound = _furtherResult.nextLink !== undefined ? true : false;\n          } else {\n            notFound = false;\n          }\n        }\n      }\n      var outputEventsString = [];\n      for (var index = 0; index < outputEvents.length; index++) {\n        outputEventsString.push(JSON.stringify(outputEvents[index]));\n      }\n      dispatch(currentEventsSlice.actions.setCurrentEvents(outputEventsString));\n    });\n    return _getEvents.apply(this, arguments);\n  }\n  useEffect(function () {\n    getEvents();\n  }, [selectedDate]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsxs(View, {\n    children: [_jsxs(View, {\n      style: {\n        height: pageData.dimensions.window.height * 0.1,\n        backgroundColor: '#444444'\n      },\n      children: [_jsx(View, {\n        style: {\n          flexDirection: \"row\"\n        },\n        children: pageData.currentBreakPointMode >= 1 ? null : _jsx(Link, {\n          to: \"/\",\n          children: _jsxs(View, {\n            style: {\n              flexDirection: \"row\"\n            },\n            children: [_jsx(ChevronLeft, {\n              width: 14,\n              height: 14\n            }), _jsx(Text, {\n              children: \"Back\"\n            })]\n          })\n        })\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          height: pageData.dimensions.window.height * 0.1\n        },\n        children: [_jsx(Text, {\n          style: {\n            fontFamily: \"BukhariScript\",\n            fontSize: Math.sqrt(pageData.dimensions.window.width * 0.4 * (microsoftAccessToken.dimensions.window.height * 0.1) / 8),\n            color: \"white\",\n            marginLeft: microsoftAccessToken.dimensions.window.width * 0.05,\n            marginRight: microsoftAccessToken.dimensions.window.width * 0.00316227766017 * (microsoftAccessToken.dimensions.window.width * 0.0316227766017)\n          },\n          children: \"Calendar\"\n        }), _jsx(CalendarTypePicker, {\n          setSelectedCalendarMode: setSelectedCalendarMode,\n          selectedIndex: selectedCalendarMode,\n          width: microsoftAccessToken.dimensions.window.width * 0.5,\n          height: microsoftAccessToken.dimensions.window.height * 0.05\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            setIsShowingAddDate(true);\n            setIsEditing(false);\n            setSelectedEvent(undefined);\n          },\n          style: {\n            height: microsoftAccessToken.dimensions.window.height * 0.05,\n            width: microsoftAccessToken.dimensions.window.height * 0.05,\n            alignItems: \"center\",\n            alignContent: \"center\",\n            justifyContent: \"center\",\n            borderRadius: 50,\n            backgroundColor: \"#7d7d7d\",\n            shadowColor: '#000',\n            shadowOffset: {\n              width: 0,\n              height: 1\n            },\n            shadowOpacity: 0.8,\n            shadowRadius: 1,\n            marginLeft: microsoftAccessToken.dimensions.window.width * 0.005\n          },\n          children: _jsx(AddIcon, {\n            width: microsoftAccessToken.dimensions.window.height * 0.03,\n            height: microsoftAccessToken.dimensions.window.height * 0.03\n          })\n        })]\n      })]\n    }), _jsxs(View, {\n      style: {\n        height: microsoftAccessToken.dimensions.window.height * 0.9\n      },\n      children: [selectedCalendarMode === calendarMode.month ? _jsx(MonthViewMain, {\n        width: microsoftAccessToken.dimensions.window.width * 0.8,\n        height: microsoftAccessToken.dimensions.window.height * 0.9,\n        setAddDate: setIsShowingAddDate,\n        setIsEditing: setIsEditing,\n        setSelectedEvent: setSelectedEvent\n      }) : null, selectedCalendarMode === calendarMode.week ? _jsx(Week, {\n        width: microsoftAccessToken.dimensions.window.width * 1.0,\n        height: microsoftAccessToken.dimensions.window.height * 0.9\n      }) : null, selectedCalendarMode === calendarMode.day ? _jsx(DayView, {\n        width: microsoftAccessToken.dimensions.window.width * 0.9,\n        height: microsoftAccessToken.dimensions.window.height * 0.9\n      }) : null]\n    }), isShowingAddDate ? _jsx(View, {\n      style: {\n        zIndex: 2,\n        position: \"absolute\",\n        left: microsoftAccessToken.dimensions.window.width * 0.2,\n        top: microsoftAccessToken.dimensions.window.height * 0.1\n      },\n      children: _jsx(AddEvent, {\n        setIsShowingAddDate: setIsShowingAddDate,\n        width: microsoftAccessToken.dimensions.window.width * 0.6,\n        height: microsoftAccessToken.dimensions.window.height * 0.8,\n        editing: isEditing,\n        editData: selectedEvent\n      })\n    }) : null]\n  });\n}\nfunction MonthViewMain(_ref3) {\n  var width = _ref3.width,\n    height = _ref3.height,\n    setAddDate = _ref3.setAddDate,\n    setIsEditing = _ref3.setIsEditing,\n    setSelectedEvent = _ref3.setSelectedEvent;\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    monthData = _useState10[0],\n    setMonthData = _useState10[1];\n  var daysInWeek = [\"Sat\", \"Mon\", \"Tue\", \"Wen\", \"Thu\", \"Fri\", \"Sun\"];\n  var currentEvents = useSelector(function (state) {\n    return state.currentEvents;\n  });\n  var _useState11 = useState(new Date()),\n    _useState12 = _slicedToArray(_useState11, 2),\n    selectedDate = _useState12[0],\n    setSelectedDate = _useState12[1];\n  var dispatch = useDispatch();\n  var _useFonts3 = useFonts({\n      'BukhariScript': require(\"../../../assets/fonts/BukhariScript.ttf\")\n    }),\n    _useFonts4 = _slicedToArray(_useFonts3, 1),\n    fontsLoaded = _useFonts4[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  function getMonthData(selectedDate) {\n    var lastDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0);\n    var firstDayWeek = findFirstDayinMonth(selectedDate);\n    var monthDataResult = [];\n    for (var index = 0; index < 42; index++) {\n      if (index >= firstDayWeek && index - firstDayWeek < lastDay.getDate()) {\n        var events = [];\n        var check = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), index - firstDayWeek + 1);\n        for (var indexEvent = 0; indexEvent < currentEvents.length; indexEvent++) {\n          var event = getEventFromJSON(currentEvents[indexEvent]);\n          var startTimeDate = new Date(event.startTime.getFullYear(), event.startTime.getMonth(), event.startTime.getDate());\n          var endTimeDate = new Date(event.endTime.getFullYear(), event.endTime.getMonth(), event.endTime.getDate());\n          if (check >= startTimeDate && check <= endTimeDate) {\n            if (check.getTime() !== event.endTime.getTime()) {\n              events.push(event);\n            }\n          }\n        }\n        monthDataResult.push({\n          showing: true,\n          dayData: index - firstDayWeek + 1,\n          id: create_UUID(),\n          events: events\n        });\n      } else {\n        monthDataResult.push({\n          showing: false,\n          dayData: 0,\n          id: create_UUID(),\n          events: []\n        });\n      }\n    }\n    setMonthData(monthDataResult);\n  }\n  var selectedDateRedux = useSelector(function (state) {\n    return state.selectedDate;\n  });\n  useEffect(function () {\n    setSelectedDate(new Date(JSON.parse(selectedDateRedux)));\n  }, [selectedDateRedux]);\n  useEffect(function () {\n    getMonthData(selectedDate);\n  }, [selectedDate, currentEvents]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsxs(View, {\n    style: {\n      backgroundColor: \"white\"\n    },\n    children: [_jsx(View, {\n      style: {\n        height: height / 8,\n        width: width\n      },\n      children: _jsxs(View, {\n        style: {\n          flexDirection: \"row\"\n        },\n        children: [_jsxs(View, {\n          style: {\n            width: width * 0.2,\n            flexDirection: \"row\"\n          },\n          children: [_jsx(Text, {\n            style: {},\n            children: selectedDate.toLocaleString(\"en-us\", {\n              month: \"long\"\n            })\n          }), _jsxs(Text, {\n            children: [\" \", selectedDate.getFullYear()]\n          })]\n        }), _jsx(View, {\n          children: selectedDate.getFullYear() !== new Date().getFullYear() || selectedDate.getMonth() != new Date().getMonth() ? _jsx(View, {\n            style: {\n              width: width * 0.2\n            },\n            children: _jsx(Pressable, {\n              onPress: function onPress() {\n                dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(new Date())));\n              },\n              children: _jsx(Text, {\n                style: {\n                  color: \"black\"\n                },\n                children: \"Today\"\n              })\n            })\n          }) : _jsx(View, {\n            style: {\n              width: width * 0.2\n            }\n          })\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            var d = new Date();\n            d.setFullYear(selectedDate.getMonth() === 1 ? selectedDate.getFullYear() - 1 : selectedDate.getFullYear(), selectedDate.getMonth() === 1 ? 12 : selectedDate.getMonth() - 1, selectedDate.getDay());\n            dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(d)));\n          },\n          children: _jsx(ChevronLeft, {\n            width: 14,\n            height: 14\n          })\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            var d = new Date();\n            d.setFullYear(selectedDate.getMonth() === 12 ? selectedDate.getFullYear() + 1 : selectedDate.getFullYear(), selectedDate.getMonth() === 12 ? 1 : selectedDate.getMonth() + 1, selectedDate.getDay());\n            dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(d)));\n          },\n          children: _jsx(ChevronRight, {\n            width: 14,\n            height: 14\n          })\n        })]\n      })\n    }), _jsxs(View, {\n      style: {\n        width: width\n      },\n      children: [_jsx(View, {\n        style: {\n          flexDirection: \"row\"\n        },\n        children: daysInWeek.map(function (DOW) {\n          return _jsx(View, {\n            style: {\n              width: width / 7,\n              height: height / 8\n            },\n            children: _jsx(Text, {\n              style: {\n                color: \"black\"\n              },\n              children: DOW\n            })\n          }, create_UUID());\n        })\n      }), _jsx(View, {\n        children: Array.from(Array(7).keys()).map(function (valueRow) {\n          return _jsx(View, {\n            style: {\n              flexDirection: \"row\"\n            },\n            children: monthData.map(function (value, id) {\n              return _jsx(View, {\n                children: id >= valueRow * 7 && id <= valueRow * 7 + 6 ? _jsx(View, {\n                  children: value.showing ? _jsx(Pressable, {\n                    onPress: function onPress() {\n                      var d = new Date();\n                      d.setFullYear(selectedDate.getFullYear(), selectedDate.getMonth(), value.dayData);\n                      dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(d)));\n                    },\n                    children: _jsx(CalendarCardView, {\n                      width: width / 7,\n                      height: height / 8,\n                      value: value,\n                      setIsEditing: setIsEditing,\n                      setSelectedEvent: setSelectedEvent,\n                      setAddDate: setAddDate\n                    })\n                  }, value.id) : _jsx(View, {\n                    children: _jsx(CalendarCardView, {\n                      width: width / 7,\n                      height: height / 8,\n                      value: value,\n                      setIsEditing: setIsEditing,\n                      setSelectedEvent: setSelectedEvent,\n                      setAddDate: setAddDate\n                    })\n                  }, value.id)\n                }) : null\n              }, value.id);\n            })\n          }, \"Row_\" + valueRow + \"_\" + create_UUID());\n        })\n      })]\n    })]\n  });\n}\nfunction CalendarCardView(_ref5) {\n  var value = _ref5.value,\n    width = _ref5.width,\n    height = _ref5.height,\n    setIsEditing = _ref5.setIsEditing,\n    setSelectedEvent = _ref5.setSelectedEvent,\n    setAddDate = _ref5.setAddDate;\n  return _jsx(View, {\n    children: value.showing ? _jsxs(View, {\n      style: {\n        width: width,\n        height: height\n      },\n      children: [_jsx(Text, {\n        style: {\n          color: \"black\"\n        },\n        children: value.dayData\n      }), _jsx(View, {\n        style: {\n          width: width,\n          height: height * 0.8,\n          overflow: \"scroll\"\n        },\n        children: value.events.map(function (event) {\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              setIsEditing(true);\n              setSelectedEvent(event);\n              setAddDate(true);\n            },\n            children: _jsx(Text, {\n              children: event.name\n            })\n          }, \"Calendar_Event_\" + event.id);\n        })\n      })]\n    }) : _jsx(View, {\n      style: {\n        width: width,\n        height: height\n      }\n    })\n  });\n}","map":{"version":3,"names":["React","useCallback","useContext","useEffect","useState","Link","accessTokenContent","findFirstDayinMonth","getEventFromJSON","getGraphEvents","create_UUID","DayView","Week","useFonts","SplashScreen","orgWideGroupID","AddEvent","CalendarTypePicker","AddIcon","ChevronLeft","ChevronRight","useDispatch","useSelector","selectedDateSlice","currentEventsSlice","useMsal","loadingStateEnum","jsx","_jsx","jsxs","_jsxs","windowDimensions","Dimensions","get","screenDimensions","calendarMode","monthNames","Calendar","_ref","governmentMode","pageData","_useMsal","instance","accounts","_useState","month","_useState2","_slicedToArray","selectedCalendarMode","setSelectedCalendarMode","_useState3","_useState4","isShowingAddDate","setIsShowingAddDate","_useState5","_useState6","isEditing","setIsEditing","_useState7","undefined","_useState8","selectedEvent","setSelectedEvent","selectedDate","state","dispatch","_useFonts","require","_useFonts2","fontsLoaded","onLayoutRootView","_asyncToGenerator","hideAsync","getEvents","_getEvents","apply","arguments","selectedDateOut","Date","JSON","parse","startDate","getFullYear","getMonth","endDate","outputEvents","personalCalendarResult","accessToken","toISOString","result","success","events","url","nextLink","notFound","furtherResult","microsoftAccessToken","concat","_toConsumableArray","orgEventsResult","console","log","outputEventsString","index","length","push","stringify","actions","setCurrentEvents","View","children","style","height","dimensions","window","backgroundColor","flexDirection","currentBreakPointMode","to","width","Text","alignItems","fontFamily","fontSize","Math","sqrt","color","marginLeft","marginRight","selectedIndex","Pressable","onPress","alignContent","justifyContent","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","MonthViewMain","setAddDate","week","day","zIndex","position","left","top","editing","editData","_ref3","_useState9","_useState10","monthData","setMonthData","daysInWeek","currentEvents","_useState11","_useState12","setSelectedDate","_useFonts3","_useFonts4","getMonthData","lastDay","firstDayWeek","monthDataResult","getDate","check","indexEvent","event","startTimeDate","startTime","endTimeDate","endTime","getTime","showing","dayData","id","selectedDateRedux","toLocaleString","setCurrentEventsLastCalled","d","setFullYear","getDay","map","DOW","Array","from","keys","valueRow","value","CalendarCardView","_ref5","overflow","name"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/AuthenticatedView/Calendar/Calendar.tsx"],"sourcesContent":["import { View, Text, Dimensions, Pressable, TextInput, Switch } from 'react-native'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { Link } from 'react-router-native'\nimport callMsGraph from '../../Functions/microsoftAssets';\nimport { accessTokenContent } from '../../../App';\nimport { findFirstDayinMonth, getEventFromJSON } from '../../Functions/calendarFunctions';\nimport { getGraphEvents } from '../../Functions/calendarFunctionsGraph';\nimport create_UUID from '../../Functions/CreateUUID';\nimport DayView from \"./DayView\"\nimport Week from './Week';\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { orgWideGroupID } from '../../PaulyConfig';\nimport AddEvent from './AddEvent';\nimport CalendarTypePicker from '../../UI/CalendarTypePicker';\nimport { AddIcon, ChevronLeft, ChevronRight } from '../../UI/Icons/Icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../Redux/store';\nimport { selectedDateSlice } from '../../Redux/reducers/selectedDateReducer';\nimport { currentEventsSlice } from '../../Redux/reducers/currentEventReducer';\nimport { useMsal } from '@azure/msal-react';\nimport { loadingStateEnum } from '../../types';\n\nconst windowDimensions = Dimensions.get('window');\nconst screenDimensions = Dimensions.get('screen');\n\nenum calendarMode {\n  month,\n  week,\n  day\n}\ndeclare global {\n  type monthDataType = {\n    id: string\n    showing: boolean\n    dayData: number,\n    events: eventType[]\n  }\n  type eventType = {\n    id: string\n    name: string\n    startTime: Date\n    endTime: Date\n    eventColor: string\n    microsoftEvent: boolean\n    paulyEventType?: \"schoolDay\" | \"schoolYear\"\n    paulyEventData?: string\n    microsoftReference?: string\n  }\n}\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nexport default function Calendar({governmentMode}:{governmentMode: boolean}) {\n  const pageData = useContext(accessTokenContent);\n  const { instance, accounts } = useMsal();\n  const [selectedCalendarMode, setSelectedCalendarMode] = useState<calendarMode>(calendarMode.month)\n  const [isShowingAddDate, setIsShowingAddDate] = useState<boolean>(false)\n  const [isEditing, setIsEditing] = useState<boolean>(false)\n  const [selectedEvent, setSelectedEvent] = useState<eventType | undefined>(undefined)\n  // const fullStore = useSelector((state: RootState) => state)\n  const selectedDate = useSelector((state: RootState) => state.selectedDate)\n  const dispatch = useDispatch()\n  \n  const [fontsLoaded] = useFonts({\n    'BukhariScript': require('../../../assets/fonts/BukhariScript.ttf'),\n  });\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n\n  async function getEvents() {\n    const selectedDateOut = new Date(JSON.parse(selectedDate))\n    const startDate = new Date(selectedDateOut.getFullYear(), selectedDateOut.getMonth(), 1)\n    const endDate = new Date(selectedDateOut.getFullYear(), selectedDateOut.getMonth() + 1, 0)\n    //PersonalCalendar\n    var outputEvents: eventType[] = []\n    const personalCalendarResult = await getGraphEvents(pageData.accessToken, false, instance, accounts, \"https://graph.microsoft.com/v1.0/me/calendarView?startDateTime=\" + startDate.toISOString() +\"&endDateTime=\" + endDate.toISOString(), \"https://graph.microsoft.com/v1.0/me/events/\")\n    if (personalCalendarResult.result === loadingStateEnum.success){\n      outputEvents = personalCalendarResult.events\n      //This code is pulled from add events School Years Select\n      var url: string = (personalCalendarResult.nextLink !== undefined) ? personalCalendarResult.nextLink:\"\"\n      var notFound: boolean = (personalCalendarResult.nextLink !== undefined) ? true:false\n      while (notFound) {\n        const furtherResult = await getGraphEvents(microsoftAccessToken.accessToken, false, instance, accounts, url, \"https://graph.microsoft.com/v1.0/me/events/\")\n        if (furtherResult.result === loadingStateEnum.success) {\n          outputEvents = [...outputEvents, ...furtherResult.events]\n          url = (furtherResult.nextLink !== undefined) ? furtherResult.nextLink:\"\"\n          notFound = (furtherResult.nextLink !== undefined) ? true:false\n        } else {\n          notFound = false\n        }\n      }\n    }\n    //OrgWideEvents\n    const orgEventsResult = await getGraphEvents(pageData.accessToken, false, instance, accounts, \"https://graph.microsoft.com/v1.0/groups/\" + orgWideGroupID + \"/calendar/events?$filter=start/dateTime%20ge%20'\" + startDate.toISOString() + \"'%20and%20end/dateTime%20le%20'\" + endDate.toISOString() + \"'\", \"https://graph.microsoft.com/v1.0/groups/\" + orgWideGroupID + \"/calendar/events/\")\n    if (orgEventsResult.result === loadingStateEnum.success) {\n      outputEvents = [...outputEvents, ...orgEventsResult.events]\n      //This code is pulled from add events School Years Select\n      var url: string = (orgEventsResult.nextLink !== undefined) ? orgEventsResult.nextLink:\"\"\n      var notFound: boolean = (orgEventsResult.nextLink !== undefined) ? true:false\n      while (notFound) {\n        const furtherResult = await getGraphEvents(microsoftAccessToken.accessToken, false, instance, accounts, url, \"https://graph.microsoft.com/v1.0/groups/\" + orgWideGroupID + \"/calendar/events/\")\n        console.log(furtherResult)\n        if (furtherResult.result === loadingStateEnum.success) {\n          outputEvents = [...outputEvents, ...furtherResult.events]\n          url = (furtherResult.nextLink !== undefined) ? furtherResult.nextLink:\"\"\n          notFound = (furtherResult.nextLink !== undefined) ? true:false\n        } else {\n          notFound = false\n        }\n      }\n    }\n    var outputEventsString: string[] = []\n    for (var index = 0; index < outputEvents.length; index++) {\n      outputEventsString.push(JSON.stringify(outputEvents[index]))\n    }\n    dispatch(currentEventsSlice.actions.setCurrentEvents(outputEventsString))\n  }\n\n  useEffect(() => {\n    getEvents()\n  }, [selectedDate])\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <View>\n      <View style={{height: pageData.dimensions.window.height * 0.1, backgroundColor: '#444444'}}>\n        <View style={{flexDirection: \"row\"}}>\n          { (pageData.currentBreakPointMode >= 1) ?\n            null:<Link to=\"/\">\n              <View style={{flexDirection: \"row\"}}>\n                <ChevronLeft width={14} height={14}/>\n                <Text>Back</Text>\n              </View>\n            </Link>\n          } \n        </View>\n        <View style={{flexDirection: \"row\", alignItems: \"center\", height: pageData.dimensions.window.height * 0.1}}>\n          <Text style={{fontFamily: \"BukhariScript\", fontSize: Math.sqrt(((pageData.dimensions.window.width * 0.4)*(microsoftAccessToken.dimensions.window.height * 0.1))/8), color: \"white\", marginLeft: microsoftAccessToken.dimensions.window.width * 0.05, marginRight: (microsoftAccessToken.dimensions.window.width * 0.00316227766017) * (microsoftAccessToken.dimensions.window.width * 0.0316227766017)}}>Calendar</Text>\n          <CalendarTypePicker setSelectedCalendarMode={setSelectedCalendarMode} selectedIndex={selectedCalendarMode} width={microsoftAccessToken.dimensions.window.width * 0.5} height={microsoftAccessToken.dimensions.window.height * 0.05}/>\n          <Pressable onPress={() => {setIsShowingAddDate(true); setIsEditing(false); setSelectedEvent(undefined)}} style={{height: microsoftAccessToken.dimensions.window.height * 0.05, width: microsoftAccessToken.dimensions.window.height * 0.05, alignItems: \"center\", alignContent: \"center\", justifyContent: \"center\", borderRadius: 50, backgroundColor: \"#7d7d7d\", shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.8, shadowRadius: 1, marginLeft: microsoftAccessToken.dimensions.window.width * 0.005}}>\n            <AddIcon width={microsoftAccessToken.dimensions.window.height * 0.03} height={microsoftAccessToken.dimensions.window.height * 0.03}/>\n          </Pressable>\n        </View>\n      </View> \n      <View style={{height: microsoftAccessToken.dimensions.window.height * 0.9}}>\n      { (selectedCalendarMode === calendarMode.month) ?\n        <MonthViewMain width={microsoftAccessToken.dimensions.window.width * 0.8} height={microsoftAccessToken.dimensions.window.height * 0.9} setAddDate={setIsShowingAddDate} setIsEditing={setIsEditing} setSelectedEvent={setSelectedEvent}/>: null\n      }\n      { (selectedCalendarMode === calendarMode.week) ?\n        <Week width={microsoftAccessToken.dimensions.window.width * 1.0} height={microsoftAccessToken.dimensions.window.height * 0.9} />:null\n      }\n      { (selectedCalendarMode === calendarMode.day) ?\n        <DayView width={microsoftAccessToken.dimensions.window.width * 0.9} height={microsoftAccessToken.dimensions.window.height * 0.9} />:null\n      }\n      </View>\n      { isShowingAddDate ?\n        <View style={{zIndex: 2, position: \"absolute\", left: microsoftAccessToken.dimensions.window.width * 0.2, top: microsoftAccessToken.dimensions.window.height * 0.1}}>\n          <AddEvent setIsShowingAddDate={setIsShowingAddDate} width={microsoftAccessToken.dimensions.window.width * 0.6} height={microsoftAccessToken.dimensions.window.height * 0.8} editing={isEditing} editData={selectedEvent} />\n        </View>:null\n      }\n    </View>\n  )\n}\n\nfunction MonthViewMain({width, height, setAddDate, setIsEditing, setSelectedEvent}:{width: number, height: number, setAddDate: (addDate: boolean) => void, setIsEditing: (isEditing: boolean) => void, setSelectedEvent: (selectedEvent: eventType) => void}) {\n  const [monthData, setMonthData] = useState<monthDataType[]>([])\n  const daysInWeek: String[] = [\"Sat\", \"Mon\", \"Tue\", \"Wen\", \"Thu\", \"Fri\", \"Sun\"]\n  // const fullStore = useSelector((state: RootState) => state)\n  const currentEvents = useSelector((state: RootState) => state.currentEvents)\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date())\n  \n  const dispatch = useDispatch()\n  const [fontsLoaded] = useFonts({\n    'BukhariScript': require('../../../assets/fonts/BukhariScript.ttf'),\n  });\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n\n  function getMonthData(selectedDate: Date) {\n    //Check if this month\n    var lastDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0);\n    const firstDayWeek = findFirstDayinMonth(selectedDate)\n    var monthDataResult: monthDataType[] = []\n    for (let index = 0; index < 42; index++) {\n      if (index >= firstDayWeek && (index - firstDayWeek) < (lastDay.getDate())){\n        //In the current month\n        var events: eventType[] = []\n        const check: Date = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), (index - firstDayWeek + 1))\n        for (var indexEvent = 0; indexEvent < currentEvents.length; indexEvent++) {\n          const event: eventType = getEventFromJSON(currentEvents[indexEvent])\n          const startTimeDate = new Date(event.startTime.getFullYear(), event.startTime.getMonth(), event.startTime.getDate())\n          const endTimeDate = new Date(event.endTime.getFullYear(), event.endTime.getMonth(), event.endTime.getDate())\n          if (check >= startTimeDate && check <= endTimeDate) {\n            //Event is on the date\n            if (check.getTime() !== event.endTime.getTime()) {\n              events.push(event)\n            }\n          }\n        }\n        monthDataResult.push({showing: true, dayData: (index - firstDayWeek + 1), id: create_UUID(), events: events})\n      } else {\n        monthDataResult.push({showing: false, dayData: 0, id: create_UUID(), events: []})\n      }\n    }\n    setMonthData(monthDataResult)\n  }\n\n  const selectedDateRedux: string =  useSelector((state: RootState) => state.selectedDate)\n  useEffect(() => {\n    setSelectedDate(new Date(JSON.parse(selectedDateRedux)))\n  }, [selectedDateRedux])\n\n  useEffect(() => {\n    getMonthData(selectedDate)\n  }, [selectedDate, currentEvents])\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <View style={{backgroundColor: \"white\"}}>\n      <View style={{height: height/8, width: width}}>\n        <View style={{flexDirection: \"row\"}}>\n          <View style={{width: width * 0.2, flexDirection: \"row\"}}>\n            <Text style={{}}>{selectedDate.toLocaleString(\"en-us\", { month: \"long\" })}</Text><Text> {selectedDate.getFullYear()}</Text>{/*leading, title, white*/}\n          </View>\n          <View>\n            {(selectedDate.getFullYear() !== new Date().getFullYear() || selectedDate.getMonth() != new Date().getMonth()) ?\n              <View style={{width: width * 0.2}}>\n                <Pressable onPress={() => {\n                  dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(new Date())))\n                }}>\n                  <Text style={{color: \"black\"}}>Today</Text>\n                </Pressable>\n              </View>:<View style={{width: width * 0.2}}></View>\n            }\n          </View>\n          {/*This is left chevron*/}\n          <Pressable onPress={() => {\n            const d = new Date();\n            d.setFullYear((selectedDate.getMonth() === 1) ? selectedDate.getFullYear() - 1:selectedDate.getFullYear(), (selectedDate.getMonth() === 1) ? 12:selectedDate.getMonth() - 1, selectedDate.getDay());\n            dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(d)))\n          }} >\n            <ChevronLeft width={14} height={14}/>\n          </Pressable>\n          {/*This is right chevron*/}\n          <Pressable onPress={() => {\n            const d = new Date();\n            d.setFullYear((selectedDate.getMonth() === 12) ? selectedDate.getFullYear() + 1:selectedDate.getFullYear(), (selectedDate.getMonth() === 12) ? 1:selectedDate.getMonth() + 1, selectedDate.getDay());\n            dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(d)))\n          }}>\n            <ChevronRight width={14} height={14}/>\n          </Pressable>\n        </View>\n      </View>\n      <View style={{width: width}}>\n        <View style={{flexDirection: \"row\"}}>\n          {daysInWeek.map((DOW) => (\n            <View key={create_UUID()} style={{width: width/7, height: height/8}}>\n              <Text style={{color: \"black\"}}>{DOW}</Text>\n            </View>\n          ))}\n        </View>\n          <View>\n            { Array.from(Array(7).keys()).map((valueRow) => (\n              <View key={\"Row_\"+valueRow+\"_\"+create_UUID()} style={{flexDirection: \"row\"}}>\n                { monthData.map((value, id) => (\n                  <View key={value.id}>\n                    {(id >= valueRow * 7 && id <= valueRow * 7 + 6) ?\n                      <View>\n                        { value.showing ?\n                          <Pressable onPress={() => {\n                            const d = new Date();\n                            d.setFullYear(selectedDate.getFullYear(), selectedDate.getMonth(), value.dayData);\n                            dispatch(selectedDateSlice.actions.setCurrentEventsLastCalled(JSON.stringify(d)))\n                          }} key={value.id}>\n                            <CalendarCardView width={width / 7} height={height / 8} value={value} setIsEditing={setIsEditing} setSelectedEvent={setSelectedEvent}  setAddDate={setAddDate}/>\n                          </Pressable>:<View key={value.id}><CalendarCardView width={width / 7} height={height / 8} value={value} setIsEditing={setIsEditing} setSelectedEvent={setSelectedEvent} setAddDate={setAddDate}/></View>\n                        }\n                      </View>:null\n                    }\n                  </View>\n                ))}\n              </View>\n            ))}\n          </View>\n      </View>\n    </View>\n  )\n}\n\nfunction CalendarCardView({value, width, height, setIsEditing, setSelectedEvent, setAddDate}:{value: monthDataType, width: number, height: number, setIsEditing: (isEditing: boolean) => void, setSelectedEvent: (selectedEvent: eventType) => void, setAddDate: (addDate: boolean) => void}) {\n  return(\n    <View>\n      { (value.showing) ?\n        <View style={{width: width, height: height}}>\n          <Text style={{color: \"black\"}}>{value.dayData}</Text>\n          <View style={{width: width, height: height * 0.8, overflow: \"scroll\"}}>\n            {value.events.map((event) => (\n              <Pressable key={\"Calendar_Event_\" + event.id} onPress={() => {setIsEditing(true); setSelectedEvent(event); setAddDate(true)}}>\n                <Text>{event.name}</Text>\n              </Pressable>\n            ))}\n          </View>\n        </View>:<View style={{width: width, height: height}}></View>\n      }\n    </View>\n  )\n}\n//     Rectangle()\n//         .fill(Color.marron)\n//         .frame(width: geo.width * 0.14285714285714, height: geo.width * 0.14285714285714)\n//     if value.Showing{\n//         if Int(value.DayData) == Day{\n//             RadialGradient(\n//                 gradient: Gradient(colors: [.customGray, .marron]),\n//                       center: .center,\n//                       startRadius: 10,\n//                       endRadius: 25\n//                   )\n//             .opacity(0.75)\n//         } else {\n//             if NowYear == Year && NowMonth == CurrentMonth && NowDay == Int(value.DayData){\n//                 RadialGradient(\n//                           gradient: Gradient(colors: [.gray, .marron]),\n//                           center: .center,\n//                           startRadius: 10,\n//                           endRadius: 25\n//                       )\n//                 .opacity(0.75)\n//             }\n//         }\n//     }\n// }\n\n\n                  //   if value.Showing{\n                  //     // Specify date components\n                  //     var dateComponents = DateComponents()\n                  //     let CurrentYear = Calendar.current.dateComponents([.year], from: SelectedDate).year\n                  //     let CurrentMonth = Calendar.current.dateComponents([.month], from: SelectedDate).month\n                  //     dateComponents.year = CurrentYear\n                  //     dateComponents.month = CurrentMonth\n                  //     dateComponents.day = Int(value.DayData)\n                  //     dateComponents.timeZone = TimeZone(abbreviation: \"CDT\") // Japan Standard Time\n                  //     dateComponents.hour = 0\n                  //     dateComponents.minute = 0\n\n                  //     // Create date from components\n                  //     let userCalendar = Calendar(identifier: .gregorian) // since the components above (like year 1980) are for Gregorian\n                  //     SelectedDate = userCalendar.date(from: dateComponents)!\n                  // }\n\n// function WeekView(){\n//   // @EnvironmentObject var WindowMode: SelectedWindowMode\n//   // @Binding var CalendarClasses: [CalendarCourseType]\n//   // @Binding var SelectedDates: [DateProperty]\n//   @State var CurrentEvents: EventType[]] = []\n//   const [selectedDay, setSelectedDay] = useState<Date>(Date())\n//   @State var Days: [Date] = []\n//   const modes: String[] = [\"Schedule\", \"Events\"]\n//   @State var SelectedMode: String = \"Schedule\"\n//   @State var SelectedDate: Int = 0\n//   useEffect(() => {\n\n//   }, [selectedDay])\n//   let monthInt = Calendar.current.dateComponents([.day], from: Date())\n//   let CurrentDay = Calendar.current.dateComponents([.day], from: WeekDay)\n//   return (\n//     <View>\n//               <View>\n//                   Spacer()\n//                   Button(){\n//                       SelectedDay = Calendar.current.date(byAdding: .day, value: -7, to: SelectedDay)!\n//                       Days = GetDates(CurrentDate: SelectedDay)\n//                   } label: {\n//                       Image(systemName: \"chevron.left\")\n//                   }\n//                   Text(SelectedDay, format: .dateTime.month().year())\n//                   Button(){\n//                       SelectedDay = Calendar.current.date(byAdding: .day, value: 7, to: SelectedDay)!\n//                       Days = GetDates(CurrentDate: SelectedDay)\n//                   } label: {\n//                       Image(systemName: \"chevron.forward\")\n//                   }\n//                   if SelectedDay.formatted(date: .numeric, time: .omitted) != Date.now.formatted(date: .numeric, time: .omitted){\n//                       Button(){\n//                           SelectedDay = Date.now\n//                           Days = GetDates(CurrentDate: SelectedDay)\n//                       } label: {\n//                           Text(\"Today\")\n//                       }\n//                   }\n//                   Spacer()\n//               </View>\n//               <View>\n//                 {Days.map((weekDay) => (\n//                   <View>\n//                     <Pressable onPress={() => {\n//                       SelectedDate = CurrentDay.day ?? 100\n//                       SelectedDay = WeekDay\n//                     }}>\n//                       <View>\n//                         <Svg style={{zIndex: 0}}>\n//                           <Circle />\n//                         </Svg>\n//                         <Text style={{zIndex: 1}}>{weekDay.toLocaleString()}</Text>\n//                       </View>\n//                     </Pressable>\n//                   </View>\n//                 ))\n\n//                 }\n//                   ForEach(Days, id: \\.self){ WeekDay in\n\n//                       if CurrentDay == monthInt {\n//                           Button{\n//                               SelectedDate = CurrentDay.day ?? 100\n//                               SelectedDay = WeekDay\n//                           } label: {\n//                               ZStack{\n//                                   Circle()\n//                                       .strokeBorder(SelectedDate == (CurrentDay.day ?? 100) ? Color.blue:Color.clear, lineWidth: 2.0)\n//                                       .background(Circle().fill(.red))\n//                                       .frame(width: geo.size.width * 0.1, height: geo.size.height * 0.1)\n//                                   Text(WeekDay, format: .dateTime.day())\n//                                       .foregroundColor(.black)\n//                               }.onAppear(){\n//                                   SelectedDate = monthInt.day ?? 0\n//                               }\n//                           }\n//                       } else {\n//                           Button{\n//                               SelectedDate = CurrentDay.day ?? 100\n//                               SelectedDay = WeekDay\n//                           } label: {\n//                               ZStack{\n//                                   Circle()\n//                                       .strokeBorder(SelectedDate == (CurrentDay.day ?? 100) ? Color.blue:Color.clear, lineWidth: 2.0)\n//                                       .background(Circle().fill(.gray))\n//                                       .frame(width: geo.size.width * 0.1, height: geo.size.height * 0.1)\n//                                   Text(WeekDay, format: .dateTime.day())\n//                                       .foregroundColor(.black)\n//                               }\n//                           }\n//                       }\n//                   }\n//               </View>\n//               Picker(\"\", selection: $SelectedMode){\n//                   ForEach(Modes, id: \\.self){\n//                       Text($0)\n//                   }\n//               }.pickerStyle(.segmented)\n//               Spacer()\n//               if SelectedMode == \"Schedule\"{\n//                   DayView(CalendarClasses: $CalendarClasses, SelectedDates: $SelectedDates, SelectedDay: $SelectedDay)\n//                     .environmentObject(WindowMode)\n//               } else {\n//                   if SelectedMode == \"Events\"{\n//                       CalendarEventsView(SelectedDay: $SelectedDay)\n//                           .environmentObject(WindowMode)\n//                   }\n//               }\n//     </View>\n//   )\n// }\n\n// function getWeekdayDates(CurrentDate: Date): Date[] {\n//   let weekday = Calendar.current.component(.weekday, from: CurrentDate)\n//   var result: [Date] = []\n//   for x in 0..<weekday{\n//       result.append(Calendar.current.date(byAdding: .day, value: -x, to: CurrentDate)!)\n//   }\n//   for x in (weekday..<7).enumerated(){\n//       result.append(Calendar.current.date(byAdding: .day, value: (x.offset + 1), to: CurrentDate)!)\n//   }\n//   result.sort()\n//   return result\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}