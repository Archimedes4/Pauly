{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useMsal } from \"@azure/msal-react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { loginRequest } from \"./authConfig\";\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowDimensions = Dimensions.get('window');\nvar screenDimensions = Dimensions.get('screen');\nexport default function Login() {\n  var _useMsal = useMsal(),\n    instance = _useMsal.instance;\n  var _useState = useState({\n      window: windowDimensions,\n      screen: screenDimensions\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    dimensions = _useState2[0],\n    setDimensions = _useState2[1];\n  useEffect(function () {\n    var subscription = Dimensions.addEventListener('change', function (_ref) {\n      var window = _ref.window,\n        screen = _ref.screen;\n      setDimensions({\n        window: window,\n        screen: screen\n      });\n    });\n    return function () {\n      return subscription == null ? void 0 : subscription.remove();\n    };\n  });\n  useEffect(function () {\n    setDimensions({\n      window: Dimensions.get('window'),\n      screen: Dimensions.get('screen')\n    });\n  }, []);\n  var _useFonts = useFonts({\n      'BukhariScript': require(\"../assets/fonts/BukhariScript.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsxs(View, {\n    style: {\n      backgroundColor: \"#793033\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: dimensions.window.height,\n      width: dimensions.window.width\n    },\n    children: [_jsx(Text, {\n      style: {\n        fontFamily: \"BukhariScript\",\n        fontSize: 150,\n        textShadowColor: \"white\",\n        textShadowRadius: 10\n      },\n      children: \"Pauly\"\n    }), _jsx(Pressable, {\n      onPress: _asyncToGenerator(function* () {\n        instance.loginRedirect(loginRequest).catch(function (e) {\n          console.log(e);\n        });\n      }),\n      style: {\n        height: dimensions.window.height * 0.2,\n        width: dimensions.window.width * 0.5,\n        borderRadius: 25,\n        backgroundColor: \"white\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        shadowColor: '#000',\n        shadowOffset: {\n          width: 0,\n          height: 1\n        },\n        shadowOpacity: 0.8,\n        shadowRadius: 10\n      },\n      children: _jsx(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"LOGIN\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useState","useMsal","View","Pressable","Text","Dimensions","loginRequest","useFonts","SplashScreen","jsx","_jsx","jsxs","_jsxs","windowDimensions","get","screenDimensions","Login","_useMsal","instance","_useState","window","screen","_useState2","_slicedToArray","dimensions","setDimensions","subscription","addEventListener","_ref","remove","_useFonts","require","_useFonts2","fontsLoaded","onLayoutRootView","_asyncToGenerator","hideAsync","style","backgroundColor","alignContent","alignItems","justifyContent","height","width","children","fontFamily","fontSize","textShadowColor","textShadowRadius","onPress","loginRedirect","catch","e","console","log","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","textAlign"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/Login.tsx"],"sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\nimport { useMsal } from \"@azure/msal-react\";\nimport {View, Pressable, Text, Dimensions} from \"react-native\"\nimport { loginRequest } from \"./authConfig\";\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\n\nconst windowDimensions = Dimensions.get('window');\nconst screenDimensions = Dimensions.get('screen');\n\nexport default function Login() {\n    const { instance } = useMsal();\n    const [dimensions, setDimensions] = useState({\n        window: windowDimensions,\n        screen: screenDimensions,\n    });\n    \n    useEffect(() => {\n        const subscription = Dimensions.addEventListener(\n        'change',\n        ({window, screen}) => {\n            setDimensions({window, screen});\n        },\n        );\n        return () => subscription?.remove();\n    });\n\n    useEffect(() => {\n        setDimensions({\n            window: Dimensions.get('window'),\n            screen: Dimensions.get('screen'),\n        });\n    }, [])\n\n    const [fontsLoaded] = useFonts({\n        'BukhariScript': require('../assets/fonts/BukhariScript.ttf'),\n      });\n    \n      const onLayoutRootView = useCallback(async () => {\n        if (fontsLoaded) {\n          await SplashScreen.hideAsync();\n        }\n      }, [fontsLoaded]);\n\n    if (!fontsLoaded) {\n        return null;\n    }\n\n    return (\n        <View style={{backgroundColor: \"#793033\", alignContent: \"center\", alignItems: \"center\", justifyContent: \"center\", height: dimensions.window.height, width: dimensions.window.width}}>\n            <Text style={{fontFamily: \"BukhariScript\", fontSize: 150, textShadowColor: \"white\", textShadowRadius: 10}}>Pauly</Text>\n            <Pressable onPress={async () => {\n                instance.loginRedirect(loginRequest).catch((e) => {\n                    console.log(e);\n                })\n            }} style={{height: dimensions.window.height * 0.2, width: dimensions.window.width * 0.5, borderRadius: 25, backgroundColor: \"white\", alignContent: \"center\", alignItems: \"center\", justifyContent: \"center\", shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.8, shadowRadius: 10}}>\n                <Text style={{textAlign: \"center\"}}>LOGIN</Text>\n            </Pressable>\n        </View>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}