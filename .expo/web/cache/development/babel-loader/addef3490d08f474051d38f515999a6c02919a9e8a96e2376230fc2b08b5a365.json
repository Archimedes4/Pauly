{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-native';\nimport callMsGraph from \"../../../../Functions/microsoftAssets\";\nimport { accessTokenContent } from \"../../../../../App\";\nimport { useMsal } from '@azure/msal-react';\nimport { siteID } from \"../../../../PaulyConfig\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function MicrosoftGraphEditList() {\n  var pageData = useContext(accessTokenContent);\n  var _useMsal = useMsal(),\n    instance = _useMsal.instance,\n    accounts = _useMsal.accounts;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentColumns = _useState2[0],\n    setCurrentColumns = _useState2[1];\n  var _useParams = useParams(),\n    listId = _useParams.listId;\n  function getListItems() {\n    return _getListItems.apply(this, arguments);\n  }\n  function _getListItems() {\n    _getListItems = _asyncToGenerator(function* () {\n      var result = yield callMsGraph(pageData.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID + \"/lists/\" + listId + \"/items?expand=fields\", instance, accounts);\n      if (result.ok) {\n        var data = yield result.json();\n        console.log(data);\n      } else {}\n    });\n    return _getListItems.apply(this, arguments);\n  }\n  function indexColumn(_x) {\n    return _indexColumn.apply(this, arguments);\n  }\n  function _indexColumn() {\n    _indexColumn = _asyncToGenerator(function* (columnId) {\n      var data = {\n        \"indexed\": \"true\"\n      };\n      var result = yield callMsGraph(pageData.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID + \"/lists/\" + listId + \"/columns/\" + columnId, instance, accounts, \"PATCH\", false, JSON.stringify(data));\n      console.log(result);\n      if (result.ok) {\n        var _data = yield result.json();\n        console.log(_data);\n        var newColumnData = currentColumns;\n        var index = newColumnData.findIndex(function (e) {\n          e.id === columnId;\n        });\n        if (index !== -1) {\n          newColumnData[index].indexed = true;\n          setCurrentColumns(newColumnData);\n        } else {}\n      }\n    });\n    return _indexColumn.apply(this, arguments);\n  }\n  function getColumns() {\n    return _getColumns.apply(this, arguments);\n  }\n  function _getColumns() {\n    _getColumns = _asyncToGenerator(function* () {\n      var result = yield callMsGraph(pageData.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID + \"/lists/\" + listId + \"/columns\", instance, accounts);\n      if (result.ok) {\n        var data = yield result.json();\n        console.log(data);\n        if (data[\"value\"].length !== undefined) {\n          var newCurrentColumns = [];\n          for (var index = 0; index < data[\"value\"].length; index++) {\n            newCurrentColumns.push({\n              columnGroup: data[\"value\"][index][\"columnGroup\"],\n              description: data[\"value\"][index][\"description\"],\n              displayName: data[\"value\"][index][\"displayName\"],\n              enforceUniqueValues: data[\"value\"][index][\"enforceUniqueValues\"],\n              hidden: data[\"value\"][index][\"hidden\"],\n              id: data[\"value\"][index][\"id\"],\n              indexed: data[\"value\"][index][\"indexed\"],\n              name: data[\"value\"][index][\"name\"],\n              readOnly: data[\"value\"][index][\"readOnly\"],\n              required: data[\"value\"][index][\"required\"]\n            });\n          }\n          setCurrentColumns(newCurrentColumns);\n        }\n      } else {}\n    });\n    return _getColumns.apply(this, arguments);\n  }\n  useEffect(function () {\n    getListItems();\n    getColumns();\n  }, []);\n  return _jsxs(View, {\n    style: {\n      overflow: \"hidden\"\n    },\n    children: [_jsx(Link, {\n      to: \"/profile/government/graph\",\n      children: _jsx(Text, {\n        children: \"Back\"\n      })\n    }), _jsx(Text, {\n      children: \"MicrosoftGraphEditList\"\n    }), _jsx(View, {\n      children: _jsx(Text, {\n        children: listId\n      })\n    }), _jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        overflow: \"scroll\",\n        height: pageData.dimensions.window.height * 0.4\n      },\n      children: currentColumns.map(function (item) {\n        return _jsxs(View, {\n          style: {\n            width: pageData.dimensions.window.width * 0.3,\n            height: pageData.dimensions.window.height * 0.4,\n            borderColor: \"black\",\n            borderWidth: 2\n          },\n          children: [_jsx(Text, {\n            children: item.displayName\n          }), item.indexed === false ? _jsx(Button, {\n            title: \"Index This Propertie\",\n            onPress: function onPress() {\n              indexColumn(item.id);\n            }\n          }) : _jsx(Text, {\n            children: \"Already Indexed\"\n          })]\n        });\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useContext","useEffect","useState","Link","useParams","callMsGraph","accessTokenContent","useMsal","siteID","jsx","_jsx","jsxs","_jsxs","MicrosoftGraphEditList","pageData","_useMsal","instance","accounts","_useState","_useState2","_slicedToArray","currentColumns","setCurrentColumns","_useParams","listId","getListItems","_getListItems","apply","arguments","_asyncToGenerator","result","accessToken","ok","data","json","console","log","indexColumn","_x","_indexColumn","columnId","JSON","stringify","newColumnData","index","findIndex","e","id","indexed","getColumns","_getColumns","length","undefined","newCurrentColumns","push","columnGroup","description","displayName","enforceUniqueValues","hidden","name","readOnly","required","View","style","overflow","children","to","Text","flexDirection","height","dimensions","window","map","item","width","borderColor","borderWidth","Button","title","onPress"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/AuthenticatedView/Profile/Government/MicrosoftGraphLists/MicrosoftGraphEditList.tsx"],"sourcesContent":["import { View, Text, Dimensions, Button } from 'react-native'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-native'\nimport callMsGraph from '../../../../Functions/microsoftAssets'\nimport { accessTokenContent } from '../../../../../App';\nimport { useMsal } from '@azure/msal-react';\nimport { siteID } from '../../../../PaulyConfig';\n\ndeclare global {\n    type listColumnType = {\n        columnGroup: string\n        description: string\n        displayName: string\n        enforceUniqueValues: boolean\n        hidden: boolean\n        id: string\n        indexed: boolean\n        name: string\n        readOnly: boolean\n        required: boolean\n    }\n}\n\nexport default function MicrosoftGraphEditList() {\n    const pageData = useContext(accessTokenContent);\n    const { instance, accounts } = useMsal();\n    const [currentColumns, setCurrentColumns] = useState<listColumnType[]>([])\n    const { listId } = useParams()\n    async function getListItems() {\n        const result = await callMsGraph(pageData.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID +\"/lists/\" + listId + \"/items?expand=fields\", instance, accounts)\n        if (result.ok) {\n            const data = await result.json()\n            console.log(data)\n        } else {\n\n        }\n    }\n    async function indexColumn(columnId: string) {\n        const data = {\n            \"indexed\": \"true\" \n        }\n        const result = await callMsGraph(pageData.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID + \"/lists/\"+ listId + \"/columns/\" + columnId, instance, accounts, \"PATCH\", false, JSON.stringify(data))//TO DO fix ids\n        console.log(result)\n        if (result.ok){\n            const data = await result.json()\n            console.log(data)\n            var newColumnData: listColumnType[] = currentColumns\n            const index = newColumnData.findIndex((e) => {e.id === columnId})\n            if (index !== -1){\n                newColumnData[index].indexed = true\n                setCurrentColumns(newColumnData)\n            } else {\n                //TO DO failed\n            }\n        }\n    }\n    async function getColumns() {\n        const result = await callMsGraph(pageData.accessToken, \"https://graph.microsoft.com/v1.0/sites/\" + siteID +\"/lists/\" + listId + \"/columns\", instance, accounts)\n        if (result.ok) {\n            const data = await result.json()\n            console.log(data)\n            if (data[\"value\"].length !== undefined){\n                var newCurrentColumns: listColumnType[] = []\n                for(let index = 0; index < data[\"value\"].length; index++){\n                    newCurrentColumns.push({\n                        columnGroup: data[\"value\"][index][\"columnGroup\"],\n                        description: data[\"value\"][index][\"description\"],\n                        displayName: data[\"value\"][index][\"displayName\"],\n                        enforceUniqueValues: data[\"value\"][index][\"enforceUniqueValues\"],\n                        hidden: data[\"value\"][index][\"hidden\"],\n                        id: data[\"value\"][index][\"id\"],\n                        indexed: data[\"value\"][index][\"indexed\"],\n                        name: data[\"value\"][index][\"name\"],\n                        readOnly: data[\"value\"][index][\"readOnly\"],\n                        required: data[\"value\"][index][\"required\"]\n                    })\n                }\n                setCurrentColumns(newCurrentColumns)\n            }\n        } else {\n\n        }\n    }\n    useEffect(() => {getListItems(); getColumns()}, [])\n    return (\n        <View style={{overflow: \"hidden\"}}>\n            <Link to=\"/profile/government/graph\">\n                <Text>Back</Text>\n            </Link>\n            <Text>MicrosoftGraphEditList</Text>\n            <View>\n            <Text>{listId}</Text>\n            </View>\n            <View style={{flexDirection: \"row\", overflow: \"scroll\", height: pageData.dimensions.window.height * 0.4}}>\n            {currentColumns.map((item) => (\n                <View style={{width: pageData.dimensions.window.width * 0.3, height: pageData.dimensions.window.height * 0.4, borderColor: \"black\", borderWidth: 2}}>\n                    <Text>{item.displayName}</Text>\n                    {(item.indexed === false) ? <Button title='Index This Propertie' onPress={() => {indexColumn(item.id)}}/>:<Text>Already Indexed</Text>\n                    }\n                </View>\n            ))}\n            </View>\n        </View>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}