{"ast":null,"code":"import React, { useRef, useEffect, Children } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar PickerWrapper = function PickerWrapper(_ref) {\n  var selectedIndex = _ref.selectedIndex,\n    onSetSelectedIndex = _ref.onSetSelectedIndex,\n    children = _ref.children,\n    width = _ref.width,\n    height = _ref.height;\n  var pan = useRef(new Animated.Value(0)).current;\n  var compoentWidth = width / Children.count(children);\n  useEffect(function () {\n    console.log(\"Length\", width / Children.count(children), \"width\", width);\n  }, [children]);\n  function fadeIn(id) {\n    Animated.timing(pan, {\n      toValue: id * compoentWidth,\n      duration: 500,\n      useNativeDriver: true\n    }).start();\n  }\n  ;\n  useEffect(function () {\n    pan.setValue(selectedIndex * compoentWidth);\n  }, []);\n  return _jsx(_Fragment, {\n    children: _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        height: height * 0.8,\n        width: width\n      },\n      children: [React.Children.map(children, function (child, index) {\n        return _jsx(View, {\n          style: {\n            position: \"absolute\",\n            transform: [{\n              translateX: index * compoentWidth\n            }],\n            width: compoentWidth\n          },\n          children: _jsx(Pressable, {\n            onPress: function onPress() {\n              onSetSelectedIndex(index);\n              fadeIn(index);\n            },\n            children: _jsx(React.Fragment, {\n              children: child\n            })\n          })\n        });\n      }), _jsx(Animated.View, {\n        style: {\n          transform: [{\n            translateX: pan\n          }]\n        },\n        children: _jsx(View, {\n          style: {\n            height: height * 0.2,\n            width: compoentWidth,\n            backgroundColor: \"black\",\n            top: height * 0.6,\n            borderRadius: 5,\n            position: \"absolute\"\n          }\n        })\n      })]\n    })\n  });\n};\nexport default PickerWrapper;","map":{"version":3,"names":["React","useRef","useEffect","Children","View","Pressable","Animated","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PickerWrapper","_ref","selectedIndex","onSetSelectedIndex","children","width","height","pan","Value","current","compoentWidth","count","console","log","fadeIn","id","timing","toValue","duration","useNativeDriver","start","setValue","style","flexDirection","map","child","index","position","transform","translateX","onPress","backgroundColor","top","borderRadius"],"sources":["/Users/andrewmainella/Desktop/Pauly/src/UI/Picker/Picker.tsx"],"sourcesContent":["//Andrew Mainella\n//June 19 2023\n//Picker with animated black line\n\nimport React, {useState, ReactNode, useRef, useEffect, Children} from 'react';\nimport { View, Pressable, Animated } from 'react-native';\n// import styles from './Picker.module.css'\n\n\ninterface PickerWrapperProps {\n  selectedIndex: number;\n  onSetSelectedIndex: (item: number) => void;\n  children: ReactNode;\n  width: number\n  height: number\n}\n\nconst PickerWrapper: React.FC<PickerWrapperProps>  = ({ selectedIndex, onSetSelectedIndex, children, width, height }) => {\n    const pan = useRef(new Animated.Value(0)).current\n    const compoentWidth = width/Children.count(children)\n    useEffect(() => {console.log(\"Length\", width/Children.count(children), \"width\", width)}, [children])\n    function fadeIn(id: number) {\n        // Will change fadeAnim value to 1 in 5 seconds\n        Animated.timing(pan, {\n          toValue: id * compoentWidth,\n          duration: 500,\n          useNativeDriver: true,\n        }).start();\n    };\n    \n    useEffect(() => {\n        pan.setValue(selectedIndex * compoentWidth)\n    }, [])\n\n    return (\n    <>\n        <View style={{flexDirection: 'row', height: height * 0.8, width: width}}>\n        {\n            React.Children.map(children, (child, index) =>\n            <View style={{position: \"absolute\", transform: [{translateX: index * compoentWidth}], width: compoentWidth}}>\n                <Pressable onPress={() => {onSetSelectedIndex(index); fadeIn(index)}}>\n                    <React.Fragment>\n                        {child}\n                    </React.Fragment>\n                </Pressable>\n            </View>\n            )\n        }\n        <Animated.View\n            style={{\n                transform: [{translateX: pan}],\n            }}>\n            <View style={{ height: height * 0.2, width: compoentWidth, backgroundColor: \"black\", top: height * 0.6, borderRadius: 5, position: \"absolute\"}} />\n        </Animated.View>\n        </View>\n    </>\n    );\n};\n\nexport default PickerWrapper;\n\n//transform: 'translate3d(' + selectedIndex * 100 + '%, ' + \"0\" + ',0)',\n\n// (selectedValue === index) ?\n// :styles.UnSelectedButtonStyle\n\n\n// .SelectedButtonStyle{\n//     background: rgba(68, 68, 68, 0.7); \n//     /* nice.. */\n//     border-radius: 30px;\n//     overflow: hidden;\n//     color: black;\n//     z-index: 2;\n//     padding: 0;\n//     margin: 0;\n//     transition: transform .5s ease-in-out;\n//   }\n  \n//   .UnSelectedButtonStyle{\n//     overflow: hidden;\n//     text-align: center;\n//     font-size: 18px;\n//     letter-spacing: 1px;\n//     color: black;\n//     position: relative;\n//     border: none;\n//     background: transparent;\n//     grid-row: 1;\n//     z-index: 5;\n//   }\n  \n//   .SwitchButtonContainer{\n//     background: rgba(155, 144, 140, 0.128);\n//     padding: 0;\n//     margin: 0;\n//     grid-column: 1;\n//     grid-row: 1;\n//   }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}